
Slave_Pulso.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000614  000006a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000614  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002e  00800118  00800118  000006c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000730  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000adf  00000000  00000000  000007c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007cc  00000000  00000000  000012a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006ae  00000000  00000000  00001a73  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000013c  00000000  00000000  00002124  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b3  00000000  00000000  00002260  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000023a  00000000  00000000  00002713  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000294d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 f9 01 	jmp	0x3f2	; 0x3f2 <__vector_7>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 4d 02 	jmp	0x49a	; 0x49a <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 60 02 	jmp	0x4c0	; 0x4c0 <__vector_24>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e1       	ldi	r30, 0x14	; 20
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e1       	ldi	r26, 0x18	; 24
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 34       	cpi	r26, 0x46	; 70
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 bd 00 	call	0x17a	; 0x17a <main>
  9e:	0c 94 08 03 	jmp	0x610	; 0x610 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_Slave_Init>:
 */ 

#include "I2C_S.h"

void I2C_Slave_Init(uint8_t address){
	DDRC &= ~((1<<DDC4)|(1<<DDC5)); //Pines de I2C como entradas
  a6:	97 b1       	in	r25, 0x07	; 7
  a8:	9f 7c       	andi	r25, 0xCF	; 207
  aa:	97 b9       	out	0x07, r25	; 7
	
	TWAR = address << 1; // Se asigna la dirección que tendrá
  ac:	88 0f       	add	r24, r24
  ae:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
	
	TWCR = (1<<TWEA)|(1<<TWEN)|(1<<TWIE); //Se habilita la interfaz, ACK automático, se Habilita la ISR
  b2:	85 e4       	ldi	r24, 0x45	; 69
  b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  b8:	08 95       	ret

000000ba <interruptSetup>:

#include "Interrupt_Pulse.h"

void interruptSetup(){
	// Initializes Timer2 to throw an interrupt every 2mS.
	TCCR2A = 0x02;     // DISABLE PWM ON DIGITAL PINS 3 AND 11, AND GO INTO CTC MODE
  ba:	82 e0       	ldi	r24, 0x02	; 2
  bc:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = 0x06;     // DON'T FORCE COMPARE, 256 PRESCALER
  c0:	96 e0       	ldi	r25, 0x06	; 6
  c2:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	OCR2A = 0X7C;      // SET THE TOP OF THE COUNT TO 124 FOR 500Hz SAMPLE RATE
  c6:	9c e7       	ldi	r25, 0x7C	; 124
  c8:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	TIMSK2 = 0x02;     // ENABLE INTERRUPT ON MATCH BETWEEN TIMER2 AND OCR2A
  cc:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
  d0:	08 95       	ret

000000d2 <writetxtUART>:
		
		
    }
}

void writetxtUART(char* texto){
  d2:	ac 01       	movw	r20, r24
	uint8_t i;
	for (i=0;texto[i]!='\0';i++){
  d4:	20 e0       	ldi	r18, 0x00	; 0
  d6:	07 c0       	rjmp	.+14     	; 0xe6 <writetxtUART+0x14>
		while(!(UCSR0A&(1<<UDRE0)));//esperar hasta que el udre0 esté en 1
  d8:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  dc:	95 ff       	sbrs	r25, 5
  de:	fc cf       	rjmp	.-8      	; 0xd8 <writetxtUART+0x6>
		UDR0=texto[i];//cuando i nulo se acaba
  e0:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    }
}

void writetxtUART(char* texto){
	uint8_t i;
	for (i=0;texto[i]!='\0';i++){
  e4:	2f 5f       	subi	r18, 0xFF	; 255
  e6:	fa 01       	movw	r30, r20
  e8:	e2 0f       	add	r30, r18
  ea:	f1 1d       	adc	r31, r1
  ec:	30 81       	ld	r19, Z
  ee:	31 11       	cpse	r19, r1
  f0:	f3 cf       	rjmp	.-26     	; 0xd8 <writetxtUART+0x6>
		while(!(UCSR0A&(1<<UDRE0)));//esperar hasta que el udre0 esté en 1
		UDR0=texto[i];//cuando i nulo se acaba
	}
}
  f2:	08 95       	ret

000000f4 <init_ADC>:

void init_ADC(void){
	ADMUX = 0;
  f4:	ec e7       	ldi	r30, 0x7C	; 124
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	10 82       	st	Z, r1
	//Vref = AVCC = 5V
	ADMUX |= (1<<REFS0);
  fa:	80 81       	ld	r24, Z
  fc:	80 64       	ori	r24, 0x40	; 64
  fe:	80 83       	st	Z, r24
	// Justificado a la derecha
	ADMUX &= ~(1<<ADLAR);
 100:	80 81       	ld	r24, Z
 102:	8f 7d       	andi	r24, 0xDF	; 223
 104:	80 83       	st	Z, r24
	
	ADCSRA = 0;
 106:	ea e7       	ldi	r30, 0x7A	; 122
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	10 82       	st	Z, r1
	// Habilitar ADC
	ADCSRA |= (1<<ADEN);
 10c:	80 81       	ld	r24, Z
 10e:	80 68       	ori	r24, 0x80	; 128
 110:	80 83       	st	Z, r24
	// Sin Máscara de interrupción del ADC
	//ADCSRA |= (1<<ADIE);
	// Prescaler del ADC a 128
	ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
 112:	80 81       	ld	r24, Z
 114:	87 60       	ori	r24, 0x07	; 7
 116:	80 83       	st	Z, r24
	
	ADCSRB = 0;
 118:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
 11c:	08 95       	ret

0000011e <init_UART9600>:
}

void init_UART9600(void){
	
	// Configurar pines TX y RX
	DDRD &= ~(1<<DDD0);
 11e:	8a b1       	in	r24, 0x0a	; 10
 120:	8e 7f       	andi	r24, 0xFE	; 254
 122:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD1);
 124:	8a b1       	in	r24, 0x0a	; 10
 126:	82 60       	ori	r24, 0x02	; 2
 128:	8a b9       	out	0x0a, r24	; 10
	
	//Configurar A modo Fast U2X0 = 1
	UCSR0A = 0;
 12a:	e0 ec       	ldi	r30, 0xC0	; 192
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	10 82       	st	Z, r1
	UCSR0A |= (1<<U2X0);
 130:	80 81       	ld	r24, Z
 132:	82 60       	ori	r24, 0x02	; 2
 134:	80 83       	st	Z, r24
	
	//Configurar B Habilitar ISR RX
	UCSR0B = 0;
 136:	e1 ec       	ldi	r30, 0xC1	; 193
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	10 82       	st	Z, r1
	UCSR0B |= (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 13c:	80 81       	ld	r24, Z
 13e:	88 69       	ori	r24, 0x98	; 152
 140:	80 83       	st	Z, r24
	
	// Paso 4: Configurar C Frame: 8 bits datos, no paridad, 1 bit stop
	UCSR0C = 0;
 142:	e2 ec       	ldi	r30, 0xC2	; 194
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	10 82       	st	Z, r1
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
 148:	80 81       	ld	r24, Z
 14a:	86 60       	ori	r24, 0x06	; 6
 14c:	80 83       	st	Z, r24
	
	// Baudrate = 9600
	UBRR0 = 207;
 14e:	8f ec       	ldi	r24, 0xCF	; 207
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 156:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 15a:	08 95       	ret

0000015c <setup>:
	
}

void setup(void){
	DDRD |= (1<<DDD2);
 15c:	8a b1       	in	r24, 0x0a	; 10
 15e:	84 60       	ori	r24, 0x04	; 4
 160:	8a b9       	out	0x0a, r24	; 10
	cli();
 162:	f8 94       	cli
	I2C_Slave_Init(slave1);
 164:	80 e2       	ldi	r24, 0x20	; 32
 166:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_Slave_Init>
	interruptSetup();
 16a:	0e 94 5d 00 	call	0xba	; 0xba <interruptSetup>
	init_ADC();
 16e:	0e 94 7a 00 	call	0xf4	; 0xf4 <init_ADC>
	init_UART9600();
 172:	0e 94 8f 00 	call	0x11e	; 0x11e <init_UART9600>
	sei();
 176:	78 94       	sei
 178:	08 95       	ret

0000017a <main>:
void writetxtUART(char* texto);

int main(void)
{
    /* Replace with your application code */
	setup();
 17a:	0e 94 ae 00 	call	0x15c	; 0x15c <setup>
	writetxtUART("Hola Mundo");
 17e:	8c e0       	ldi	r24, 0x0C	; 12
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	0e 94 69 00 	call	0xd2	; 0xd2 <writetxtUART>
	
    while (1) 
    {
		
		//  find the peak and trough of the pulse wave
		if(Signal < thresh && N > (IBI/5)*3){       // avoid dichrotic noise by waiting 3/5 of last IBI
 186:	c0 91 3d 01 	lds	r28, 0x013D	; 0x80013d <Signal>
 18a:	d0 91 3e 01 	lds	r29, 0x013E	; 0x80013e <Signal+0x1>
 18e:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <thresh>
 192:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <thresh+0x1>
 196:	c0 17       	cp	r28, r16
 198:	d1 07       	cpc	r29, r17
 19a:	f8 f4       	brcc	.+62     	; 0x1da <main+0x60>
 19c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <IBI>
 1a0:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <IBI+0x1>
 1a4:	65 e0       	ldi	r22, 0x05	; 5
 1a6:	70 e0       	ldi	r23, 0x00	; 0
 1a8:	0e 94 9f 02 	call	0x53e	; 0x53e <__divmodhi4>
 1ac:	cb 01       	movw	r24, r22
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	68 0f       	add	r22, r24
 1b4:	79 1f       	adc	r23, r25
 1b6:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <N>
 1ba:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <N+0x1>
 1be:	68 17       	cp	r22, r24
 1c0:	79 07       	cpc	r23, r25
 1c2:	5c f4       	brge	.+22     	; 0x1da <main+0x60>
			if (Signal < T){                        // T is the trough
 1c4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <T>
 1c8:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <T+0x1>
 1cc:	c8 17       	cp	r28, r24
 1ce:	d9 07       	cpc	r29, r25
 1d0:	20 f4       	brcc	.+8      	; 0x1da <main+0x60>
				T = Signal;                         // keep track of lowest point in pulse wave
 1d2:	d0 93 09 01 	sts	0x0109, r29	; 0x800109 <T+0x1>
 1d6:	c0 93 08 01 	sts	0x0108, r28	; 0x800108 <T>
			}
		}

		if(Signal > thresh && Signal > P){          // thresh condition helps avoid noise
 1da:	0c 17       	cp	r16, r28
 1dc:	1d 07       	cpc	r17, r29
 1de:	58 f4       	brcc	.+22     	; 0x1f6 <main+0x7c>
 1e0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <P>
 1e4:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <P+0x1>
 1e8:	8c 17       	cp	r24, r28
 1ea:	9d 07       	cpc	r25, r29
 1ec:	20 f4       	brcc	.+8      	; 0x1f6 <main+0x7c>
			P = Signal;                             // P is the peak
 1ee:	d0 93 0b 01 	sts	0x010B, r29	; 0x80010b <P+0x1>
 1f2:	c0 93 0a 01 	sts	0x010A, r28	; 0x80010a <P>
		}                                        // keep track of highest point in pulse wave

		//  NOW IT'S TIME TO LOOK FOR THE HEART BEAT
		// signal surges up in value every time there is a pulse
		if(firstBeat == 1){                         // if it's the first time we found a beat, if firstBeat == TRUE
 1f6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <firstBeat>
 1fa:	81 30       	cpi	r24, 0x01	; 1
 1fc:	29 f4       	brne	.+10     	; 0x208 <main+0x8e>
			firstBeat = 0;                   // clear firstBeat flag
 1fe:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <firstBeat>
			secondBeat = 1;                   // set the second beat flag
 202:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <secondBeat>
 206:	bf cf       	rjmp	.-130    	; 0x186 <main+0xc>
		} else {
			if (N > 250){                                   // avoid high frequency noise
 208:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <N>
 20c:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <N+0x1>
 210:	8b 3f       	cpi	r24, 0xFB	; 251
 212:	91 05       	cpc	r25, r1
 214:	0c f4       	brge	.+2      	; 0x218 <main+0x9e>
 216:	9e c0       	rjmp	.+316    	; 0x354 <main+0x1da>
				//valor_BPM_t = itoa(BPM, cadena, 10);
				//writetxtUART(valor_BPM_t);
				//writetxtUART("\n");
				if ( (Signal > thresh) && (Pulse == 0) && (N > (IBI/5)*3) ){
 218:	0c 17       	cp	r16, r28
 21a:	1d 07       	cpc	r17, r29
 21c:	08 f0       	brcs	.+2      	; 0x220 <main+0xa6>
 21e:	9a c0       	rjmp	.+308    	; 0x354 <main+0x1da>
 220:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <Pulse>
 224:	81 11       	cpse	r24, r1
 226:	96 c0       	rjmp	.+300    	; 0x354 <main+0x1da>
 228:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <IBI>
 22c:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <IBI+0x1>
 230:	65 e0       	ldi	r22, 0x05	; 5
 232:	70 e0       	ldi	r23, 0x00	; 0
 234:	0e 94 9f 02 	call	0x53e	; 0x53e <__divmodhi4>
 238:	cb 01       	movw	r24, r22
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	68 0f       	add	r22, r24
 240:	79 1f       	adc	r23, r25
 242:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <N>
 246:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <N+0x1>
 24a:	68 17       	cp	r22, r24
 24c:	79 07       	cpc	r23, r25
 24e:	0c f0       	brlt	.+2      	; 0x252 <main+0xd8>
 250:	81 c0       	rjmp	.+258    	; 0x354 <main+0x1da>
					Pulse = 1;                               // set the Pulse flag when we think there is a pulse
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <Pulse>

					IBI = sampleCounter - lastBeatTime;         // measure time between beats in mS
 258:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <sampleCounter>
 25c:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <sampleCounter+0x1>
 260:	a0 91 21 01 	lds	r26, 0x0121	; 0x800121 <sampleCounter+0x2>
 264:	b0 91 22 01 	lds	r27, 0x0122	; 0x800122 <sampleCounter+0x3>
 268:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <lastBeatTime>
 26c:	30 91 1c 01 	lds	r19, 0x011C	; 0x80011c <lastBeatTime+0x1>
 270:	82 1b       	sub	r24, r18
 272:	93 0b       	sbc	r25, r19
 274:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <IBI+0x1>
 278:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <IBI>
					lastBeatTime = sampleCounter;               // keep track of time for next pulse
 27c:	40 91 1f 01 	lds	r20, 0x011F	; 0x80011f <sampleCounter>
 280:	50 91 20 01 	lds	r21, 0x0120	; 0x800120 <sampleCounter+0x1>
 284:	60 91 21 01 	lds	r22, 0x0121	; 0x800121 <sampleCounter+0x2>
 288:	70 91 22 01 	lds	r23, 0x0122	; 0x800122 <sampleCounter+0x3>
 28c:	40 93 1b 01 	sts	0x011B, r20	; 0x80011b <lastBeatTime>
 290:	50 93 1c 01 	sts	0x011C, r21	; 0x80011c <lastBeatTime+0x1>
 294:	60 93 1d 01 	sts	0x011D, r22	; 0x80011d <lastBeatTime+0x2>
 298:	70 93 1e 01 	sts	0x011E, r23	; 0x80011e <lastBeatTime+0x3>

					if(secondBeat == 1){                        // if this is the second beat, if secondBeat == TRUE
 29c:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <secondBeat>
 2a0:	21 30       	cpi	r18, 0x01	; 1
 2a2:	89 f4       	brne	.+34     	; 0x2c6 <main+0x14c>
						secondBeat = 0;                  // clear secondBeat flag
 2a4:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <secondBeat>
						for(int i=0; i<=9; i++){             // seed the running total to get a realisitic BPM at startup
 2a8:	20 e0       	ldi	r18, 0x00	; 0
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	09 c0       	rjmp	.+18     	; 0x2c0 <main+0x146>
							rate[i] = IBI;
 2ae:	f9 01       	movw	r30, r18
 2b0:	ee 0f       	add	r30, r30
 2b2:	ff 1f       	adc	r31, r31
 2b4:	e9 5d       	subi	r30, 0xD9	; 217
 2b6:	fe 4f       	sbci	r31, 0xFE	; 254
 2b8:	91 83       	std	Z+1, r25	; 0x01
 2ba:	80 83       	st	Z, r24
					IBI = sampleCounter - lastBeatTime;         // measure time between beats in mS
					lastBeatTime = sampleCounter;               // keep track of time for next pulse

					if(secondBeat == 1){                        // if this is the second beat, if secondBeat == TRUE
						secondBeat = 0;                  // clear secondBeat flag
						for(int i=0; i<=9; i++){             // seed the running total to get a realisitic BPM at startup
 2bc:	2f 5f       	subi	r18, 0xFF	; 255
 2be:	3f 4f       	sbci	r19, 0xFF	; 255
 2c0:	2a 30       	cpi	r18, 0x0A	; 10
 2c2:	31 05       	cpc	r19, r1
 2c4:	a4 f3       	brlt	.-24     	; 0x2ae <main+0x134>
						}
					}


					// keep a running total of the last 10 IBI values
						runningTotal = 0;                  // clear the runningTotal variable
 2c6:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <runningTotal+0x1>
 2ca:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <runningTotal>

						for(int i=0; i<=8; i++){                // shift data in the rate array
 2ce:	20 e0       	ldi	r18, 0x00	; 0
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	1c c0       	rjmp	.+56     	; 0x30c <main+0x192>
							rate[i] = rate[i+1];                  // and drop the oldest IBI value
 2d4:	b9 01       	movw	r22, r18
 2d6:	6f 5f       	subi	r22, 0xFF	; 255
 2d8:	7f 4f       	sbci	r23, 0xFF	; 255
 2da:	fb 01       	movw	r30, r22
 2dc:	ee 0f       	add	r30, r30
 2de:	ff 1f       	adc	r31, r31
 2e0:	e9 5d       	subi	r30, 0xD9	; 217
 2e2:	fe 4f       	sbci	r31, 0xFE	; 254
 2e4:	40 81       	ld	r20, Z
 2e6:	51 81       	ldd	r21, Z+1	; 0x01
 2e8:	22 0f       	add	r18, r18
 2ea:	33 1f       	adc	r19, r19
 2ec:	f9 01       	movw	r30, r18
 2ee:	e9 5d       	subi	r30, 0xD9	; 217
 2f0:	fe 4f       	sbci	r31, 0xFE	; 254
 2f2:	51 83       	std	Z+1, r21	; 0x01
 2f4:	40 83       	st	Z, r20
							runningTotal += rate[i];              // add up the 9 oldest IBI values
 2f6:	20 91 23 01 	lds	r18, 0x0123	; 0x800123 <runningTotal>
 2fa:	30 91 24 01 	lds	r19, 0x0124	; 0x800124 <runningTotal+0x1>
 2fe:	42 0f       	add	r20, r18
 300:	53 1f       	adc	r21, r19
 302:	50 93 24 01 	sts	0x0124, r21	; 0x800124 <runningTotal+0x1>
 306:	40 93 23 01 	sts	0x0123, r20	; 0x800123 <runningTotal>


					// keep a running total of the last 10 IBI values
						runningTotal = 0;                  // clear the runningTotal variable

						for(int i=0; i<=8; i++){                // shift data in the rate array
 30a:	9b 01       	movw	r18, r22
 30c:	29 30       	cpi	r18, 0x09	; 9
 30e:	31 05       	cpc	r19, r1
 310:	0c f3       	brlt	.-62     	; 0x2d4 <main+0x15a>
							rate[i] = rate[i+1];                  // and drop the oldest IBI value
							runningTotal += rate[i];              // add up the 9 oldest IBI values
						}

						rate[9] = IBI;                          // add the latest IBI to the rate array
 312:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <rate+0x13>
 316:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <rate+0x12>
						runningTotal += rate[9];                // add the latest IBI to runningTotal
 31a:	20 91 23 01 	lds	r18, 0x0123	; 0x800123 <runningTotal>
 31e:	30 91 24 01 	lds	r19, 0x0124	; 0x800124 <runningTotal+0x1>
 322:	82 0f       	add	r24, r18
 324:	93 1f       	adc	r25, r19
						runningTotal /= 10;                     // average the last 10 IBI values
 326:	6a e0       	ldi	r22, 0x0A	; 10
 328:	70 e0       	ldi	r23, 0x00	; 0
 32a:	0e 94 9f 02 	call	0x53e	; 0x53e <__divmodhi4>
 32e:	70 93 24 01 	sts	0x0124, r23	; 0x800124 <runningTotal+0x1>
 332:	60 93 23 01 	sts	0x0123, r22	; 0x800123 <runningTotal>
						BPM = 60000/runningTotal;               // how many beats can fit into a minute? that's BPM!
 336:	9b 01       	movw	r18, r22
 338:	77 0f       	add	r23, r23
 33a:	44 0b       	sbc	r20, r20
 33c:	55 0b       	sbc	r21, r21
 33e:	60 e6       	ldi	r22, 0x60	; 96
 340:	7a ee       	ldi	r23, 0xEA	; 234
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	0e 94 b3 02 	call	0x566	; 0x566 <__divmodsi4>
 34a:	20 93 03 01 	sts	0x0103, r18	; 0x800103 <BPM>
						QS = 1;                              // set Quantified Self flag
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
						// QS FLAG IS NOT CLEARED INSIDE THIS ISR
				
						}
			}
			if (Signal < thresh && Pulse == 1){   // when the values are going down, the beat is over
 354:	c0 17       	cp	r28, r16
 356:	d1 07       	cpc	r29, r17
 358:	f0 f4       	brcc	.+60     	; 0x396 <main+0x21c>
 35a:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <Pulse>
 35e:	81 30       	cpi	r24, 0x01	; 1
 360:	d1 f4       	brne	.+52     	; 0x396 <main+0x21c>

				Pulse = 0;                         // reset the Pulse flag so we can do it again
 362:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <Pulse>
				amp = P - T;                           // get amplitude of the pulse wave
 366:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <T>
 36a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <T+0x1>
 36e:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <P>
 372:	28 1b       	sub	r18, r24
 374:	20 93 05 01 	sts	0x0105, r18	; 0x800105 <amp>
				thresh = amp/2 + T;                    // set thresh at 50% of the amplitude
 378:	26 95       	lsr	r18
 37a:	82 0f       	add	r24, r18
 37c:	91 1d       	adc	r25, r1
 37e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <thresh+0x1>
 382:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <thresh>
				P = thresh;                            // reset these for next time
 386:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <P+0x1>
 38a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <P>
				T = thresh;
 38e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <T+0x1>
 392:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <T>
			}

			if (N > 2500){                           // if 2.5 seconds go by without a beat
 396:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <N>
 39a:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <N+0x1>
 39e:	85 3c       	cpi	r24, 0xC5	; 197
 3a0:	99 40       	sbci	r25, 0x09	; 9
 3a2:	0c f4       	brge	.+2      	; 0x3a6 <main+0x22c>
 3a4:	f0 ce       	rjmp	.-544    	; 0x186 <main+0xc>
				thresh = 512;                          // set thresh default
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	92 e0       	ldi	r25, 0x02	; 2
 3aa:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <thresh+0x1>
 3ae:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <thresh>
				P = 540;                               // set P default
 3b2:	8c e1       	ldi	r24, 0x1C	; 28
 3b4:	92 e0       	ldi	r25, 0x02	; 2
 3b6:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <P+0x1>
 3ba:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <P>
				T = 540;                               // set T default
 3be:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <T+0x1>
 3c2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <T>
				lastBeatTime = sampleCounter;          // bring the lastBeatTime up to date
 3c6:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <sampleCounter>
 3ca:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <sampleCounter+0x1>
 3ce:	a0 91 21 01 	lds	r26, 0x0121	; 0x800121 <sampleCounter+0x2>
 3d2:	b0 91 22 01 	lds	r27, 0x0122	; 0x800122 <sampleCounter+0x3>
 3d6:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <lastBeatTime>
 3da:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <lastBeatTime+0x1>
 3de:	a0 93 1d 01 	sts	0x011D, r26	; 0x80011d <lastBeatTime+0x2>
 3e2:	b0 93 1e 01 	sts	0x011E, r27	; 0x80011e <lastBeatTime+0x3>
				firstBeat = 1;                      // set these to avoid noise
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <firstBeat>
				secondBeat = 0;                    // when we get the heartbeat back
 3ec:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <secondBeat>
 3f0:	ca ce       	rjmp	.-620    	; 0x186 <main+0xc>

000003f2 <__vector_7>:
	init_ADC();
	init_UART9600();
	sei();
}

ISR(TIMER2_COMPA_vect){                         // triggered when Timer2 counts to 124
 3f2:	1f 92       	push	r1
 3f4:	0f 92       	push	r0
 3f6:	0f b6       	in	r0, 0x3f	; 63
 3f8:	0f 92       	push	r0
 3fa:	11 24       	eor	r1, r1
 3fc:	2f 93       	push	r18
 3fe:	3f 93       	push	r19
 400:	8f 93       	push	r24
 402:	9f 93       	push	r25
 404:	af 93       	push	r26
 406:	bf 93       	push	r27
 408:	ef 93       	push	r30
 40a:	ff 93       	push	r31
	ADCSRA |= (1 << ADSC);
 40c:	ea e7       	ldi	r30, 0x7A	; 122
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	80 81       	ld	r24, Z
 412:	80 64       	ori	r24, 0x40	; 64
 414:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));
 416:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 41a:	86 fd       	sbrc	r24, 6
 41c:	fc cf       	rjmp	.-8      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
	Signal = (Signal & 0x0000) | (ADCL) | (ADCH << 8);
 41e:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 422:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	98 2f       	mov	r25, r24
 42a:	88 27       	eor	r24, r24
 42c:	82 2b       	or	r24, r18
 42e:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <Signal+0x1>
 432:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <Signal>
	sampleCounter += 2;                         // keep track of the time in mS with this variable
 436:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <sampleCounter>
 43a:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <sampleCounter+0x1>
 43e:	a0 91 21 01 	lds	r26, 0x0121	; 0x800121 <sampleCounter+0x2>
 442:	b0 91 22 01 	lds	r27, 0x0122	; 0x800122 <sampleCounter+0x3>
 446:	02 96       	adiw	r24, 0x02	; 2
 448:	a1 1d       	adc	r26, r1
 44a:	b1 1d       	adc	r27, r1
 44c:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <sampleCounter>
 450:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <sampleCounter+0x1>
 454:	a0 93 21 01 	sts	0x0121, r26	; 0x800121 <sampleCounter+0x2>
 458:	b0 93 22 01 	sts	0x0122, r27	; 0x800122 <sampleCounter+0x3>
	N = sampleCounter - lastBeatTime;       // monitor the time since the last beat to avoid noise
 45c:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <sampleCounter>
 460:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <sampleCounter+0x1>
 464:	a0 91 21 01 	lds	r26, 0x0121	; 0x800121 <sampleCounter+0x2>
 468:	b0 91 22 01 	lds	r27, 0x0122	; 0x800122 <sampleCounter+0x3>
 46c:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <lastBeatTime>
 470:	30 91 1c 01 	lds	r19, 0x011C	; 0x80011c <lastBeatTime+0x1>
 474:	82 1b       	sub	r24, r18
 476:	93 0b       	sbc	r25, r19
 478:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <N+0x1>
 47c:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <N>
}
 480:	ff 91       	pop	r31
 482:	ef 91       	pop	r30
 484:	bf 91       	pop	r27
 486:	af 91       	pop	r26
 488:	9f 91       	pop	r25
 48a:	8f 91       	pop	r24
 48c:	3f 91       	pop	r19
 48e:	2f 91       	pop	r18
 490:	0f 90       	pop	r0
 492:	0f be       	out	0x3f, r0	; 63
 494:	0f 90       	pop	r0
 496:	1f 90       	pop	r1
 498:	18 95       	reti

0000049a <__vector_18>:
	ADCSRA |= (1<<ADEN);
	ADCSRA |= (1<<ADSC);
	ADCSRA |= (1<<ADIF);
}*/

ISR(USART_RX_vect){
 49a:	1f 92       	push	r1
 49c:	0f 92       	push	r0
 49e:	0f b6       	in	r0, 0x3f	; 63
 4a0:	0f 92       	push	r0
 4a2:	11 24       	eor	r1, r1
 4a4:	8f 93       	push	r24
	bandera_lectura = 1;
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
	bufferRX = UDR0;
 4ac:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 4b0:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <bufferRX>
}
 4b4:	8f 91       	pop	r24
 4b6:	0f 90       	pop	r0
 4b8:	0f be       	out	0x3f, r0	; 63
 4ba:	0f 90       	pop	r0
 4bc:	1f 90       	pop	r1
 4be:	18 95       	reti

000004c0 <__vector_24>:

ISR(TWI_vect){
 4c0:	1f 92       	push	r1
 4c2:	0f 92       	push	r0
 4c4:	0f b6       	in	r0, 0x3f	; 63
 4c6:	0f 92       	push	r0
 4c8:	11 24       	eor	r1, r1
 4ca:	8f 93       	push	r24
 4cc:	ef 93       	push	r30
 4ce:	ff 93       	push	r31
	uint8_t state = TWSR & 0xFC;
 4d0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 4d4:	8c 7f       	andi	r24, 0xFC	; 252
	switch(state){
 4d6:	80 38       	cpi	r24, 0x80	; 128
 4d8:	99 f0       	breq	.+38     	; 0x500 <__vector_24+0x40>
 4da:	28 f4       	brcc	.+10     	; 0x4e6 <__vector_24+0x26>
 4dc:	80 36       	cpi	r24, 0x60	; 96
 4de:	51 f0       	breq	.+20     	; 0x4f4 <__vector_24+0x34>
 4e0:	80 37       	cpi	r24, 0x70	; 112
 4e2:	41 f0       	breq	.+16     	; 0x4f4 <__vector_24+0x34>
 4e4:	1f c0       	rjmp	.+62     	; 0x524 <__vector_24+0x64>
 4e6:	88 3a       	cpi	r24, 0xA8	; 168
 4e8:	a9 f0       	breq	.+42     	; 0x514 <__vector_24+0x54>
 4ea:	88 3b       	cpi	r24, 0xB8	; 184
 4ec:	99 f0       	breq	.+38     	; 0x514 <__vector_24+0x54>
 4ee:	80 39       	cpi	r24, 0x90	; 144
 4f0:	c9 f4       	brne	.+50     	; 0x524 <__vector_24+0x64>
 4f2:	06 c0       	rjmp	.+12     	; 0x500 <__vector_24+0x40>
		case 0x60:
		case 0x70:
		TWCR |= (1<<TWINT);
 4f4:	ec eb       	ldi	r30, 0xBC	; 188
 4f6:	f0 e0       	ldi	r31, 0x00	; 0
 4f8:	80 81       	ld	r24, Z
 4fa:	80 68       	ori	r24, 0x80	; 128
 4fc:	80 83       	st	Z, r24
		break;
 4fe:	17 c0       	rjmp	.+46     	; 0x52e <__vector_24+0x6e>
		case 0x80:
		case 0x90:
		buffer = TWDR;
 500:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 504:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <buffer>
		TWCR |= (1<<TWINT); // Se limpia la bandera
 508:	ec eb       	ldi	r30, 0xBC	; 188
 50a:	f0 e0       	ldi	r31, 0x00	; 0
 50c:	80 81       	ld	r24, Z
 50e:	80 68       	ori	r24, 0x80	; 128
 510:	80 83       	st	Z, r24
		break;
 512:	0d c0       	rjmp	.+26     	; 0x52e <__vector_24+0x6e>
		case 0xA8:
		case 0xB8:
		TWDR = BPM; // Cargar el dato
 514:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <BPM>
 518:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = (1<<TWEN)|(1<<TWIE)|(1<<TWINT)|(1<<TWEA); // Inicia el envio
 51c:	85 ec       	ldi	r24, 0xC5	; 197
 51e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;
 522:	05 c0       	rjmp	.+10     	; 0x52e <__vector_24+0x6e>
		default:
		TWCR |= (1<<TWINT)|(1<<TWSTO);
 524:	ec eb       	ldi	r30, 0xBC	; 188
 526:	f0 e0       	ldi	r31, 0x00	; 0
 528:	80 81       	ld	r24, Z
 52a:	80 69       	ori	r24, 0x90	; 144
 52c:	80 83       	st	Z, r24
	}
 52e:	ff 91       	pop	r31
 530:	ef 91       	pop	r30
 532:	8f 91       	pop	r24
 534:	0f 90       	pop	r0
 536:	0f be       	out	0x3f, r0	; 63
 538:	0f 90       	pop	r0
 53a:	1f 90       	pop	r1
 53c:	18 95       	reti

0000053e <__divmodhi4>:
 53e:	97 fb       	bst	r25, 7
 540:	07 2e       	mov	r0, r23
 542:	16 f4       	brtc	.+4      	; 0x548 <__divmodhi4+0xa>
 544:	00 94       	com	r0
 546:	07 d0       	rcall	.+14     	; 0x556 <__divmodhi4_neg1>
 548:	77 fd       	sbrc	r23, 7
 54a:	09 d0       	rcall	.+18     	; 0x55e <__divmodhi4_neg2>
 54c:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <__udivmodhi4>
 550:	07 fc       	sbrc	r0, 7
 552:	05 d0       	rcall	.+10     	; 0x55e <__divmodhi4_neg2>
 554:	3e f4       	brtc	.+14     	; 0x564 <__divmodhi4_exit>

00000556 <__divmodhi4_neg1>:
 556:	90 95       	com	r25
 558:	81 95       	neg	r24
 55a:	9f 4f       	sbci	r25, 0xFF	; 255
 55c:	08 95       	ret

0000055e <__divmodhi4_neg2>:
 55e:	70 95       	com	r23
 560:	61 95       	neg	r22
 562:	7f 4f       	sbci	r23, 0xFF	; 255

00000564 <__divmodhi4_exit>:
 564:	08 95       	ret

00000566 <__divmodsi4>:
 566:	05 2e       	mov	r0, r21
 568:	97 fb       	bst	r25, 7
 56a:	1e f4       	brtc	.+6      	; 0x572 <__divmodsi4+0xc>
 56c:	00 94       	com	r0
 56e:	0e 94 ca 02 	call	0x594	; 0x594 <__negsi2>
 572:	57 fd       	sbrc	r21, 7
 574:	07 d0       	rcall	.+14     	; 0x584 <__divmodsi4_neg2>
 576:	0e 94 e6 02 	call	0x5cc	; 0x5cc <__udivmodsi4>
 57a:	07 fc       	sbrc	r0, 7
 57c:	03 d0       	rcall	.+6      	; 0x584 <__divmodsi4_neg2>
 57e:	4e f4       	brtc	.+18     	; 0x592 <__divmodsi4_exit>
 580:	0c 94 ca 02 	jmp	0x594	; 0x594 <__negsi2>

00000584 <__divmodsi4_neg2>:
 584:	50 95       	com	r21
 586:	40 95       	com	r20
 588:	30 95       	com	r19
 58a:	21 95       	neg	r18
 58c:	3f 4f       	sbci	r19, 0xFF	; 255
 58e:	4f 4f       	sbci	r20, 0xFF	; 255
 590:	5f 4f       	sbci	r21, 0xFF	; 255

00000592 <__divmodsi4_exit>:
 592:	08 95       	ret

00000594 <__negsi2>:
 594:	90 95       	com	r25
 596:	80 95       	com	r24
 598:	70 95       	com	r23
 59a:	61 95       	neg	r22
 59c:	7f 4f       	sbci	r23, 0xFF	; 255
 59e:	8f 4f       	sbci	r24, 0xFF	; 255
 5a0:	9f 4f       	sbci	r25, 0xFF	; 255
 5a2:	08 95       	ret

000005a4 <__udivmodhi4>:
 5a4:	aa 1b       	sub	r26, r26
 5a6:	bb 1b       	sub	r27, r27
 5a8:	51 e1       	ldi	r21, 0x11	; 17
 5aa:	07 c0       	rjmp	.+14     	; 0x5ba <__udivmodhi4_ep>

000005ac <__udivmodhi4_loop>:
 5ac:	aa 1f       	adc	r26, r26
 5ae:	bb 1f       	adc	r27, r27
 5b0:	a6 17       	cp	r26, r22
 5b2:	b7 07       	cpc	r27, r23
 5b4:	10 f0       	brcs	.+4      	; 0x5ba <__udivmodhi4_ep>
 5b6:	a6 1b       	sub	r26, r22
 5b8:	b7 0b       	sbc	r27, r23

000005ba <__udivmodhi4_ep>:
 5ba:	88 1f       	adc	r24, r24
 5bc:	99 1f       	adc	r25, r25
 5be:	5a 95       	dec	r21
 5c0:	a9 f7       	brne	.-22     	; 0x5ac <__udivmodhi4_loop>
 5c2:	80 95       	com	r24
 5c4:	90 95       	com	r25
 5c6:	bc 01       	movw	r22, r24
 5c8:	cd 01       	movw	r24, r26
 5ca:	08 95       	ret

000005cc <__udivmodsi4>:
 5cc:	a1 e2       	ldi	r26, 0x21	; 33
 5ce:	1a 2e       	mov	r1, r26
 5d0:	aa 1b       	sub	r26, r26
 5d2:	bb 1b       	sub	r27, r27
 5d4:	fd 01       	movw	r30, r26
 5d6:	0d c0       	rjmp	.+26     	; 0x5f2 <__udivmodsi4_ep>

000005d8 <__udivmodsi4_loop>:
 5d8:	aa 1f       	adc	r26, r26
 5da:	bb 1f       	adc	r27, r27
 5dc:	ee 1f       	adc	r30, r30
 5de:	ff 1f       	adc	r31, r31
 5e0:	a2 17       	cp	r26, r18
 5e2:	b3 07       	cpc	r27, r19
 5e4:	e4 07       	cpc	r30, r20
 5e6:	f5 07       	cpc	r31, r21
 5e8:	20 f0       	brcs	.+8      	; 0x5f2 <__udivmodsi4_ep>
 5ea:	a2 1b       	sub	r26, r18
 5ec:	b3 0b       	sbc	r27, r19
 5ee:	e4 0b       	sbc	r30, r20
 5f0:	f5 0b       	sbc	r31, r21

000005f2 <__udivmodsi4_ep>:
 5f2:	66 1f       	adc	r22, r22
 5f4:	77 1f       	adc	r23, r23
 5f6:	88 1f       	adc	r24, r24
 5f8:	99 1f       	adc	r25, r25
 5fa:	1a 94       	dec	r1
 5fc:	69 f7       	brne	.-38     	; 0x5d8 <__udivmodsi4_loop>
 5fe:	60 95       	com	r22
 600:	70 95       	com	r23
 602:	80 95       	com	r24
 604:	90 95       	com	r25
 606:	9b 01       	movw	r18, r22
 608:	ac 01       	movw	r20, r24
 60a:	bd 01       	movw	r22, r26
 60c:	cf 01       	movw	r24, r30
 60e:	08 95       	ret

00000610 <_exit>:
 610:	f8 94       	cli

00000612 <__stop_program>:
 612:	ff cf       	rjmp	.-2      	; 0x612 <__stop_program>
