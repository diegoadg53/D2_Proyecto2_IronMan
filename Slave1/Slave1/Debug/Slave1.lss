
Slave1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000a36  00000aca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  0080010e  0080010e  00000ad8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000ad8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ca6  00000000  00000000  00000c14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008d0  00000000  00000000  000018ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006cd  00000000  00000000  0000218a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  00002858  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000501  00000000  00000000  0000299c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000338  00000000  00000000  00002e9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000031d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__vector_24>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e3       	ldi	r30, 0x36	; 54
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 31       	cpi	r26, 0x17	; 23
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <main>
  9e:	0c 94 19 05 	jmp	0xa32	; 0xa32 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initUART9600>:
 *  Author: njfg0
 */ 
#include "com_uart.h"
void initUART9600(void){
	//configurar pines tx y rx
	DDRD &=~(1<<DDD0);//entrada
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	8e 7f       	andi	r24, 0xFE	; 254
  aa:	8a b9       	out	0x0a, r24	; 10
	DDRD|=(1<<DDD1);//salida Tx
  ac:	8a b1       	in	r24, 0x0a	; 10
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	8a b9       	out	0x0a, r24	; 10
	
	//configurar registro A modo fast u2x0 en 1
	UCSR0A=0;
  b2:	e0 ec       	ldi	r30, 0xC0	; 192
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	10 82       	st	Z, r1
	UCSR0A|=(1<<U2X0);
  b8:	80 81       	ld	r24, Z
  ba:	82 60       	ori	r24, 0x02	; 2
  bc:	80 83       	st	Z, r24
	
	//configurar registro B, habilotar isr rx, bits para habilitar RX y TX
	UCSR0B=0;
  be:	e1 ec       	ldi	r30, 0xC1	; 193
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	10 82       	st	Z, r1
	UCSR0B|=(1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
  c4:	80 81       	ld	r24, Z
  c6:	88 69       	ori	r24, 0x98	; 152
  c8:	80 83       	st	Z, r24
	
	//Configurar registro C<Frame asincrono 8 bits de datos sin pariedad, 1 bit de stop
	UCSR0C=0;
  ca:	e2 ec       	ldi	r30, 0xC2	; 194
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	10 82       	st	Z, r1
	UCSR0C|=(1<<UCSZ01)|(1<<UCSZ00);
  d0:	80 81       	ld	r24, Z
  d2:	86 60       	ori	r24, 0x06	; 6
  d4:	80 83       	st	Z, r24
	
	//baudrate = 207 con % de error igual a 0.16% con 9600
	UBRR0=207;
  d6:	8f ec       	ldi	r24, 0xCF	; 207
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  de:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  e2:	08 95       	ret

000000e4 <I2C_Slave_Init>:
 *  Author: njfg0
 */ 

#include "I2C.h"
void I2C_Slave_Init(uint8_t adress){
	DDRC&=~((1<<DDC4)|(1<<DDC5));//ENTRADAS
  e4:	97 b1       	in	r25, 0x07	; 7
  e6:	9f 7c       	andi	r25, 0xCF	; 207
  e8:	97 b9       	out	0x07, r25	; 7
	TWAR=adress<<1;//DIRECCIÓN
  ea:	88 0f       	add	r24, r24
  ec:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
	TWCR=(1<<TWEA)|(1<<TWEN)|(1<<TWIE);//HABILITA INTERFAZ
  f0:	85 e4       	ldi	r24, 0x45	; 69
  f2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  f6:	08 95       	ret

000000f8 <PWM0_init>:
	TCCR0B = (1 << CS01) | (1 << CS00); //preescaler de 64
}

void PWM2_init(){
	TCCR2A = (1 << WGM21) | (1 << WGM20) | (1 << COM2A1); //modo fast timero 0
	TCCR2A = (1 << CS21) | (1 << CS20); //preescaler de 64
  f8:	83 ea       	ldi	r24, 0xA3	; 163
  fa:	84 bd       	out	0x24, r24	; 36
  fc:	83 e0       	ldi	r24, 0x03	; 3
  fe:	85 bd       	out	0x25, r24	; 37
 100:	08 95       	ret

00000102 <Timer1_init>:
}

//Timer 1 interrupción cada 0.5us
void Timer1_init() {
	TCCR1A = 0;              
 102:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << CS11);    //  0.5 µs
 106:	82 e0       	ldi	r24, 0x02	; 2
 108:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TCNT1 = 0;               // Reiniciar contador
 10c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 110:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 114:	08 95       	ret

00000116 <calcular_pwm0>:


uint8_t calcular_pwm0(int angulo){
	int pulso_min=31; //1ms*256/20ms
	int pulso_max=62; //2ms*256/20ms
	Pulse_Servo=(((angulo)*(pulso_max-pulso_min))/(90+pulso_min));
 116:	2f e1       	ldi	r18, 0x1F	; 31
 118:	ac 01       	movw	r20, r24
 11a:	24 9f       	mul	r18, r20
 11c:	c0 01       	movw	r24, r0
 11e:	25 9f       	mul	r18, r21
 120:	90 0d       	add	r25, r0
 122:	11 24       	eor	r1, r1
 124:	69 e7       	ldi	r22, 0x79	; 121
 126:	70 e0       	ldi	r23, 0x00	; 0
 128:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <__divmodhi4>
 12c:	86 2f       	mov	r24, r22
 12e:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <Pulse_Servo>
	return Pulse_Servo;
}
 132:	08 95       	ret

00000134 <medir_distancia>:


// Función para medir distancia
void medir_distancia() {
	PORTB &= ~(1 << TRIG_PIN);  
 134:	85 b1       	in	r24, 0x05	; 5
 136:	8f 7d       	andi	r24, 0xDF	; 223
 138:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13a:	8a e0       	ldi	r24, 0x0A	; 10
 13c:	8a 95       	dec	r24
 13e:	f1 f7       	brne	.-4      	; 0x13c <medir_distancia+0x8>
 140:	00 c0       	rjmp	.+0      	; 0x142 <medir_distancia+0xe>
	_delay_us(2);
	PORTB |= (1 << TRIG_PIN);  
 142:	85 b1       	in	r24, 0x05	; 5
 144:	80 62       	ori	r24, 0x20	; 32
 146:	85 b9       	out	0x05, r24	; 5
 148:	85 e3       	ldi	r24, 0x35	; 53
 14a:	8a 95       	dec	r24
 14c:	f1 f7       	brne	.-4      	; 0x14a <medir_distancia+0x16>
 14e:	00 00       	nop
	_delay_us(10);
	PORTB &= ~(1 << TRIG_PIN);
 150:	85 b1       	in	r24, 0x05	; 5
 152:	8f 7d       	andi	r24, 0xDF	; 223
 154:	85 b9       	out	0x05, r24	; 5

	// Esperar a que ECHO pase a HIGH
	while (!(PIND & (1 << ECHO_PIN)));
 156:	4a 9b       	sbis	0x09, 2	; 9
 158:	fe cf       	rjmp	.-4      	; 0x156 <medir_distancia+0x22>
	TCNT1 = 0;  // Reiniciar Timer1
 15a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 15e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	while (PIND & (1 << ECHO_PIN));  
 162:	4a 99       	sbic	0x09, 2	; 9
 164:	fe cf       	rjmp	.-4      	; 0x162 <medir_distancia+0x2e>

	// Guardar el tiempo medido
	pulso_echo = TCNT1;
 166:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 16a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 16e:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <pulso_echo+0x1>
 172:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <pulso_echo>
	distancia = (pulso_echo / 2) / 58;  // Convertir a cm
 176:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <pulso_echo>
 17a:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <pulso_echo+0x1>
 17e:	af e9       	ldi	r26, 0x9F	; 159
 180:	b6 e4       	ldi	r27, 0x46	; 70
 182:	0e 94 0c 02 	call	0x418	; 0x418 <__umulhisi3>
 186:	96 95       	lsr	r25
 188:	87 95       	ror	r24
 18a:	92 95       	swap	r25
 18c:	82 95       	swap	r24
 18e:	8f 70       	andi	r24, 0x0F	; 15
 190:	89 27       	eor	r24, r25
 192:	9f 70       	andi	r25, 0x0F	; 15
 194:	89 27       	eor	r24, r25
 196:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <distancia+0x1>
 19a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <distancia>
 19e:	08 95       	ret

000001a0 <main>:
}



int main(void)
{
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
 1a4:	cd b7       	in	r28, 0x3d	; 61
 1a6:	de b7       	in	r29, 0x3e	; 62
 1a8:	60 97       	sbiw	r28, 0x10	; 16
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	f8 94       	cli
 1ae:	de bf       	out	0x3e, r29	; 62
 1b0:	0f be       	out	0x3f, r0	; 63
 1b2:	cd bf       	out	0x3d, r28	; 61
	 cli();  
 1b4:	f8 94       	cli

	 DDRB |= (1 << TRIG_PIN);  // TRIG como salida
 1b6:	84 b1       	in	r24, 0x04	; 4
 1b8:	80 62       	ori	r24, 0x20	; 32
 1ba:	84 b9       	out	0x04, r24	; 4
	 DDRD |= (1 << SERVO1_PIN);  // servo como salida
 1bc:	8a b1       	in	r24, 0x0a	; 10
 1be:	80 64       	ori	r24, 0x40	; 64
 1c0:	8a b9       	out	0x0a, r24	; 10
	 DDRD |= (1 << SERVO2_PIN);  // servo como salida
 1c2:	8a b1       	in	r24, 0x0a	; 10
 1c4:	80 62       	ori	r24, 0x20	; 32
 1c6:	8a b9       	out	0x0a, r24	; 10
	 DDRB |= (1 << buzzer);  // buzzer como salida
 1c8:	84 b1       	in	r24, 0x04	; 4
 1ca:	80 61       	ori	r24, 0x10	; 16
 1cc:	84 b9       	out	0x04, r24	; 4
	 DDRD &= ~(1 << ECHO_PIN); // ECHO como entrada
 1ce:	8a b1       	in	r24, 0x0a	; 10
 1d0:	8b 7f       	andi	r24, 0xFB	; 251
 1d2:	8a b9       	out	0x0a, r24	; 10
	 Timer1_init();
 1d4:	0e 94 81 00 	call	0x102	; 0x102 <Timer1_init>
	 PWM0_init();
 1d8:	0e 94 7c 00 	call	0xf8	; 0xf8 <PWM0_init>
	 
	 I2C_Slave_Init(slave1);//SENSOR ULTRASONICO
 1dc:	80 e1       	ldi	r24, 0x10	; 16
 1de:	0e 94 72 00 	call	0xe4	; 0xe4 <I2C_Slave_Init>
	 initUART9600(); // Inicializar UART
 1e2:	0e 94 53 00 	call	0xa6	; 0xa6 <initUART9600>

	 sei();  // Habilitar interrupciones globales
 1e6:	78 94       	sei
	 

	 char vect_salida[16];
	 OCR0A=calcular_pwm0(0);
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0e 94 8b 00 	call	0x116	; 0x116 <calcular_pwm0>
 1f0:	87 bd       	out	0x27, r24	; 39
	 OCR0B=calcular_pwm0(45);
 1f2:	8d e2       	ldi	r24, 0x2D	; 45
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	0e 94 8b 00 	call	0x116	; 0x116 <calcular_pwm0>
 1fa:	88 bd       	out	0x28, r24	; 40
	 
	 while (1) {
		 medir_distancia(); 
 1fc:	0e 94 9a 00 	call	0x134	; 0x134 <medir_distancia>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 200:	2f ef       	ldi	r18, 0xFF	; 255
 202:	8d ee       	ldi	r24, 0xED	; 237
 204:	92 e0       	ldi	r25, 0x02	; 2
 206:	21 50       	subi	r18, 0x01	; 1
 208:	80 40       	sbci	r24, 0x00	; 0
 20a:	90 40       	sbci	r25, 0x00	; 0
 20c:	e1 f7       	brne	.-8      	; 0x206 <main+0x66>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <main+0x70>
 210:	00 00       	nop
		 _delay_ms(60);  
		uint8_t distancia_tempo=distancia;
 212:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <distancia>
 216:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <distancia+0x1>
		if (distancia_tempo<8){
 21a:	88 30       	cpi	r24, 0x08	; 8
 21c:	b8 f4       	brcc	.+46     	; 0x24c <main+0xac>
			//for(uint8_t i=0; i<3;i++){
				PORTB|=(1<<buzzer);
 21e:	85 b1       	in	r24, 0x05	; 5
 220:	80 61       	ori	r24, 0x10	; 16
 222:	85 b9       	out	0x05, r24	; 5
				OCR0A=calcular_pwm0(45);
 224:	8d e2       	ldi	r24, 0x2D	; 45
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	0e 94 8b 00 	call	0x116	; 0x116 <calcular_pwm0>
 22c:	87 bd       	out	0x27, r24	; 39
				OCR0B=calcular_pwm0(0);
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 8b 00 	call	0x116	; 0x116 <calcular_pwm0>
 236:	88 bd       	out	0x28, r24	; 40
				estado_servos=1;//abierto
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <estado_servos>
 23e:	8f e1       	ldi	r24, 0x1F	; 31
 240:	9e e4       	ldi	r25, 0x4E	; 78
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <main+0xa2>
 246:	00 c0       	rjmp	.+0      	; 0x248 <main+0xa8>
 248:	00 00       	nop
 24a:	15 c0       	rjmp	.+42     	; 0x276 <main+0xd6>
				_delay_ms(5);
			//}
		} else {
			PORTB&=~(1<<buzzer);
 24c:	85 b1       	in	r24, 0x05	; 5
 24e:	8f 7e       	andi	r24, 0xEF	; 239
 250:	85 b9       	out	0x05, r24	; 5
			OCR0A=calcular_pwm0(0);
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	0e 94 8b 00 	call	0x116	; 0x116 <calcular_pwm0>
 25a:	87 bd       	out	0x27, r24	; 39
			OCR0B=calcular_pwm0(45);
 25c:	8d e2       	ldi	r24, 0x2D	; 45
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	0e 94 8b 00 	call	0x116	; 0x116 <calcular_pwm0>
 264:	88 bd       	out	0x28, r24	; 40
			estado_servos=0; //cerrado
 266:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <estado_servos>
 26a:	8f e1       	ldi	r24, 0x1F	; 31
 26c:	9e e4       	ldi	r25, 0x4E	; 78
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <main+0xce>
 272:	00 c0       	rjmp	.+0      	; 0x274 <main+0xd4>
 274:	00 00       	nop
			_delay_ms(5);
		}
	
			
		 sprintf(vect_salida, "Dist: %d cm\n", distancia);
 276:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <distancia>
 27a:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <distancia+0x1>
 27e:	9f 93       	push	r25
 280:	8f 93       	push	r24
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	91 e0       	ldi	r25, 0x01	; 1
 286:	9f 93       	push	r25
 288:	8f 93       	push	r24
 28a:	ce 01       	movw	r24, r28
 28c:	01 96       	adiw	r24, 0x01	; 1
 28e:	9f 93       	push	r25
 290:	8f 93       	push	r24
 292:	0e 94 2f 02 	call	0x45e	; 0x45e <sprintf>
		// writetxtUART(vect_salida);
	 }
 296:	0f 90       	pop	r0
 298:	0f 90       	pop	r0
 29a:	0f 90       	pop	r0
 29c:	0f 90       	pop	r0
 29e:	0f 90       	pop	r0
 2a0:	0f 90       	pop	r0
 2a2:	ac cf       	rjmp	.-168    	; 0x1fc <main+0x5c>

000002a4 <__vector_24>:
}

//Interrupción del I2C
ISR(TWI_vect){
 2a4:	1f 92       	push	r1
 2a6:	0f 92       	push	r0
 2a8:	0f b6       	in	r0, 0x3f	; 63
 2aa:	0f 92       	push	r0
 2ac:	11 24       	eor	r1, r1
 2ae:	2f 93       	push	r18
 2b0:	3f 93       	push	r19
 2b2:	4f 93       	push	r20
 2b4:	5f 93       	push	r21
 2b6:	6f 93       	push	r22
 2b8:	7f 93       	push	r23
 2ba:	8f 93       	push	r24
 2bc:	9f 93       	push	r25
 2be:	af 93       	push	r26
 2c0:	bf 93       	push	r27
 2c2:	ef 93       	push	r30
 2c4:	ff 93       	push	r31
	uint8_t state = TWSR & 0xFC;
 2c6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 2ca:	8c 7f       	andi	r24, 0xFC	; 252
	static uint8_t comando = 0;
	
	switch(state){
 2cc:	80 38       	cpi	r24, 0x80	; 128
 2ce:	c1 f0       	breq	.+48     	; 0x300 <__vector_24+0x5c>
 2d0:	28 f4       	brcc	.+10     	; 0x2dc <__vector_24+0x38>
 2d2:	80 36       	cpi	r24, 0x60	; 96
 2d4:	69 f0       	breq	.+26     	; 0x2f0 <__vector_24+0x4c>
 2d6:	80 37       	cpi	r24, 0x70	; 112
 2d8:	59 f0       	breq	.+22     	; 0x2f0 <__vector_24+0x4c>
 2da:	74 c0       	rjmp	.+232    	; 0x3c4 <__vector_24+0x120>
 2dc:	88 3a       	cpi	r24, 0xA8	; 168
 2de:	09 f4       	brne	.+2      	; 0x2e2 <__vector_24+0x3e>
 2e0:	4b c0       	rjmp	.+150    	; 0x378 <__vector_24+0xd4>
 2e2:	88 3b       	cpi	r24, 0xB8	; 184
 2e4:	09 f4       	brne	.+2      	; 0x2e8 <__vector_24+0x44>
 2e6:	48 c0       	rjmp	.+144    	; 0x378 <__vector_24+0xd4>
 2e8:	80 39       	cpi	r24, 0x90	; 144
 2ea:	09 f0       	breq	.+2      	; 0x2ee <__vector_24+0x4a>
 2ec:	6b c0       	rjmp	.+214    	; 0x3c4 <__vector_24+0x120>
 2ee:	08 c0       	rjmp	.+16     	; 0x300 <__vector_24+0x5c>
		case 0x60:
		case 0x70:
		comando = 0;
 2f0:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
		TWCR |= (1<<TWINT);
 2f4:	ec eb       	ldi	r30, 0xBC	; 188
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	80 81       	ld	r24, Z
 2fa:	80 68       	ori	r24, 0x80	; 128
 2fc:	80 83       	st	Z, r24
		break;
 2fe:	67 c0       	rjmp	.+206    	; 0x3ce <__vector_24+0x12a>
		case 0x80:
		case 0x90:
		//AQUI LEE LA INFORMACIÓN DE ADAFRUIT DESDE EL MASTER, MANDA UN S1 O UN S2
		if (comando == 0) {  // Primer byte recibido
 300:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 304:	81 11       	cpse	r24, r1
 306:	0c c0       	rjmp	.+24     	; 0x320 <__vector_24+0x7c>
			buffer = TWDR;  // Guardamos el primer byte
 308:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 30c:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <buffer>
			if (buffer == 'S') {  // Si es 'S', esperamos el siguiente byte
 310:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <buffer>
 314:	83 35       	cpi	r24, 0x53	; 83
 316:	51 f5       	brne	.+84     	; 0x36c <__vector_24+0xc8>
				comando = 1;
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 31e:	26 c0       	rjmp	.+76     	; 0x36c <__vector_24+0xc8>
			}
			} else if (comando == 1) {  // Segundo byte recibido (valor del comando)
 320:	81 30       	cpi	r24, 0x01	; 1
 322:	21 f5       	brne	.+72     	; 0x36c <__vector_24+0xc8>
			if (TWDR == '1') {
 324:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 328:	81 33       	cpi	r24, 0x31	; 49
 32a:	69 f4       	brne	.+26     	; 0x346 <__vector_24+0xa2>
				// Activar servos
				OCR0A = calcular_pwm0(0);
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 8b 00 	call	0x116	; 0x116 <calcular_pwm0>
 334:	87 bd       	out	0x27, r24	; 39
				OCR0B = calcular_pwm0(45);
 336:	8d e2       	ldi	r24, 0x2D	; 45
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	0e 94 8b 00 	call	0x116	; 0x116 <calcular_pwm0>
 33e:	88 bd       	out	0x28, r24	; 40
				estado_servos = 0;
 340:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <estado_servos>
 344:	11 c0       	rjmp	.+34     	; 0x368 <__vector_24+0xc4>
				} else if (TWDR == '0') {
 346:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 34a:	80 33       	cpi	r24, 0x30	; 48
 34c:	69 f4       	brne	.+26     	; 0x368 <__vector_24+0xc4>
				// Desactivar servos
				OCR0A = calcular_pwm0(45);
 34e:	8d e2       	ldi	r24, 0x2D	; 45
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	0e 94 8b 00 	call	0x116	; 0x116 <calcular_pwm0>
 356:	87 bd       	out	0x27, r24	; 39
				OCR0B = calcular_pwm0(0);
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	0e 94 8b 00 	call	0x116	; 0x116 <calcular_pwm0>
 360:	88 bd       	out	0x28, r24	; 40
				estado_servos = 1;
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <estado_servos>
			}
			comando = 0;  // Reiniciar estado del comando
 368:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
		}
		TWCR |= (1 << TWINT);  // Limpiar la bandera
 36c:	ec eb       	ldi	r30, 0xBC	; 188
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	80 81       	ld	r24, Z
 372:	80 68       	ori	r24, 0x80	; 128
 374:	80 83       	st	Z, r24
		break;
 376:	2b c0       	rjmp	.+86     	; 0x3ce <__vector_24+0x12a>
		case 0xA8:
		case 0xB8:
		if (sensor_flag==0){
 378:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <sensor_flag>
 37c:	81 11       	cpse	r24, r1
 37e:	0a c0       	rjmp	.+20     	; 0x394 <__vector_24+0xf0>
			TWDR = (distancia>>8); // Cargar alto byte
 380:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <distancia>
 384:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <distancia+0x1>
 388:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			sensor_flag=1;
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <sensor_flag>
 392:	14 c0       	rjmp	.+40     	; 0x3bc <__vector_24+0x118>
		}else if(sensor_flag==1){
 394:	81 30       	cpi	r24, 0x01	; 1
 396:	51 f4       	brne	.+20     	; 0x3ac <__vector_24+0x108>
			TWDR = (distancia&0xFF); // Cargar bajo byte
 398:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <distancia>
 39c:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <distancia+0x1>
 3a0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			sensor_flag=2;
 3a4:	82 e0       	ldi	r24, 0x02	; 2
 3a6:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <sensor_flag>
 3aa:	08 c0       	rjmp	.+16     	; 0x3bc <__vector_24+0x118>
		}else if(sensor_flag==2){
 3ac:	82 30       	cpi	r24, 0x02	; 2
 3ae:	31 f4       	brne	.+12     	; 0x3bc <__vector_24+0x118>
			TWDR=estado_servos;
 3b0:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <estado_servos>
 3b4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			sensor_flag=0;
 3b8:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <sensor_flag>
		}
		TWCR = (1<<TWEN)|(1<<TWIE)|(1<<TWINT)|(1<<TWEA); // Inicia el envio
 3bc:	85 ec       	ldi	r24, 0xC5	; 197
 3be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;
 3c2:	05 c0       	rjmp	.+10     	; 0x3ce <__vector_24+0x12a>
		default:
		TWCR |= (1<<TWINT)|(1<<TWSTO);
 3c4:	ec eb       	ldi	r30, 0xBC	; 188
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	80 81       	ld	r24, Z
 3ca:	80 69       	ori	r24, 0x90	; 144
 3cc:	80 83       	st	Z, r24
	}
 3ce:	ff 91       	pop	r31
 3d0:	ef 91       	pop	r30
 3d2:	bf 91       	pop	r27
 3d4:	af 91       	pop	r26
 3d6:	9f 91       	pop	r25
 3d8:	8f 91       	pop	r24
 3da:	7f 91       	pop	r23
 3dc:	6f 91       	pop	r22
 3de:	5f 91       	pop	r21
 3e0:	4f 91       	pop	r20
 3e2:	3f 91       	pop	r19
 3e4:	2f 91       	pop	r18
 3e6:	0f 90       	pop	r0
 3e8:	0f be       	out	0x3f, r0	; 63
 3ea:	0f 90       	pop	r0
 3ec:	1f 90       	pop	r1
 3ee:	18 95       	reti

000003f0 <__divmodhi4>:
 3f0:	97 fb       	bst	r25, 7
 3f2:	07 2e       	mov	r0, r23
 3f4:	16 f4       	brtc	.+4      	; 0x3fa <__divmodhi4+0xa>
 3f6:	00 94       	com	r0
 3f8:	07 d0       	rcall	.+14     	; 0x408 <__divmodhi4_neg1>
 3fa:	77 fd       	sbrc	r23, 7
 3fc:	09 d0       	rcall	.+18     	; 0x410 <__divmodhi4_neg2>
 3fe:	0e 94 1b 02 	call	0x436	; 0x436 <__udivmodhi4>
 402:	07 fc       	sbrc	r0, 7
 404:	05 d0       	rcall	.+10     	; 0x410 <__divmodhi4_neg2>
 406:	3e f4       	brtc	.+14     	; 0x416 <__divmodhi4_exit>

00000408 <__divmodhi4_neg1>:
 408:	90 95       	com	r25
 40a:	81 95       	neg	r24
 40c:	9f 4f       	sbci	r25, 0xFF	; 255
 40e:	08 95       	ret

00000410 <__divmodhi4_neg2>:
 410:	70 95       	com	r23
 412:	61 95       	neg	r22
 414:	7f 4f       	sbci	r23, 0xFF	; 255

00000416 <__divmodhi4_exit>:
 416:	08 95       	ret

00000418 <__umulhisi3>:
 418:	a2 9f       	mul	r26, r18
 41a:	b0 01       	movw	r22, r0
 41c:	b3 9f       	mul	r27, r19
 41e:	c0 01       	movw	r24, r0
 420:	a3 9f       	mul	r26, r19
 422:	70 0d       	add	r23, r0
 424:	81 1d       	adc	r24, r1
 426:	11 24       	eor	r1, r1
 428:	91 1d       	adc	r25, r1
 42a:	b2 9f       	mul	r27, r18
 42c:	70 0d       	add	r23, r0
 42e:	81 1d       	adc	r24, r1
 430:	11 24       	eor	r1, r1
 432:	91 1d       	adc	r25, r1
 434:	08 95       	ret

00000436 <__udivmodhi4>:
 436:	aa 1b       	sub	r26, r26
 438:	bb 1b       	sub	r27, r27
 43a:	51 e1       	ldi	r21, 0x11	; 17
 43c:	07 c0       	rjmp	.+14     	; 0x44c <__udivmodhi4_ep>

0000043e <__udivmodhi4_loop>:
 43e:	aa 1f       	adc	r26, r26
 440:	bb 1f       	adc	r27, r27
 442:	a6 17       	cp	r26, r22
 444:	b7 07       	cpc	r27, r23
 446:	10 f0       	brcs	.+4      	; 0x44c <__udivmodhi4_ep>
 448:	a6 1b       	sub	r26, r22
 44a:	b7 0b       	sbc	r27, r23

0000044c <__udivmodhi4_ep>:
 44c:	88 1f       	adc	r24, r24
 44e:	99 1f       	adc	r25, r25
 450:	5a 95       	dec	r21
 452:	a9 f7       	brne	.-22     	; 0x43e <__udivmodhi4_loop>
 454:	80 95       	com	r24
 456:	90 95       	com	r25
 458:	bc 01       	movw	r22, r24
 45a:	cd 01       	movw	r24, r26
 45c:	08 95       	ret

0000045e <sprintf>:
 45e:	ae e0       	ldi	r26, 0x0E	; 14
 460:	b0 e0       	ldi	r27, 0x00	; 0
 462:	e5 e3       	ldi	r30, 0x35	; 53
 464:	f2 e0       	ldi	r31, 0x02	; 2
 466:	0c 94 f0 04 	jmp	0x9e0	; 0x9e0 <__prologue_saves__+0x1c>
 46a:	0d 89       	ldd	r16, Y+21	; 0x15
 46c:	1e 89       	ldd	r17, Y+22	; 0x16
 46e:	86 e0       	ldi	r24, 0x06	; 6
 470:	8c 83       	std	Y+4, r24	; 0x04
 472:	1a 83       	std	Y+2, r17	; 0x02
 474:	09 83       	std	Y+1, r16	; 0x01
 476:	8f ef       	ldi	r24, 0xFF	; 255
 478:	9f e7       	ldi	r25, 0x7F	; 127
 47a:	9e 83       	std	Y+6, r25	; 0x06
 47c:	8d 83       	std	Y+5, r24	; 0x05
 47e:	ae 01       	movw	r20, r28
 480:	47 5e       	subi	r20, 0xE7	; 231
 482:	5f 4f       	sbci	r21, 0xFF	; 255
 484:	6f 89       	ldd	r22, Y+23	; 0x17
 486:	78 8d       	ldd	r23, Y+24	; 0x18
 488:	ce 01       	movw	r24, r28
 48a:	01 96       	adiw	r24, 0x01	; 1
 48c:	0e 94 51 02 	call	0x4a2	; 0x4a2 <vfprintf>
 490:	ef 81       	ldd	r30, Y+7	; 0x07
 492:	f8 85       	ldd	r31, Y+8	; 0x08
 494:	e0 0f       	add	r30, r16
 496:	f1 1f       	adc	r31, r17
 498:	10 82       	st	Z, r1
 49a:	2e 96       	adiw	r28, 0x0e	; 14
 49c:	e4 e0       	ldi	r30, 0x04	; 4
 49e:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <__epilogue_restores__+0x1c>

000004a2 <vfprintf>:
 4a2:	ab e0       	ldi	r26, 0x0B	; 11
 4a4:	b0 e0       	ldi	r27, 0x00	; 0
 4a6:	e7 e5       	ldi	r30, 0x57	; 87
 4a8:	f2 e0       	ldi	r31, 0x02	; 2
 4aa:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__prologue_saves__>
 4ae:	6c 01       	movw	r12, r24
 4b0:	7b 01       	movw	r14, r22
 4b2:	8a 01       	movw	r16, r20
 4b4:	fc 01       	movw	r30, r24
 4b6:	17 82       	std	Z+7, r1	; 0x07
 4b8:	16 82       	std	Z+6, r1	; 0x06
 4ba:	83 81       	ldd	r24, Z+3	; 0x03
 4bc:	81 ff       	sbrs	r24, 1
 4be:	cc c1       	rjmp	.+920    	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 4c0:	ce 01       	movw	r24, r28
 4c2:	01 96       	adiw	r24, 0x01	; 1
 4c4:	3c 01       	movw	r6, r24
 4c6:	f6 01       	movw	r30, r12
 4c8:	93 81       	ldd	r25, Z+3	; 0x03
 4ca:	f7 01       	movw	r30, r14
 4cc:	93 fd       	sbrc	r25, 3
 4ce:	85 91       	lpm	r24, Z+
 4d0:	93 ff       	sbrs	r25, 3
 4d2:	81 91       	ld	r24, Z+
 4d4:	7f 01       	movw	r14, r30
 4d6:	88 23       	and	r24, r24
 4d8:	09 f4       	brne	.+2      	; 0x4dc <vfprintf+0x3a>
 4da:	ba c1       	rjmp	.+884    	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 4dc:	85 32       	cpi	r24, 0x25	; 37
 4de:	39 f4       	brne	.+14     	; 0x4ee <vfprintf+0x4c>
 4e0:	93 fd       	sbrc	r25, 3
 4e2:	85 91       	lpm	r24, Z+
 4e4:	93 ff       	sbrs	r25, 3
 4e6:	81 91       	ld	r24, Z+
 4e8:	7f 01       	movw	r14, r30
 4ea:	85 32       	cpi	r24, 0x25	; 37
 4ec:	29 f4       	brne	.+10     	; 0x4f8 <vfprintf+0x56>
 4ee:	b6 01       	movw	r22, r12
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	0e 94 48 04 	call	0x890	; 0x890 <fputc>
 4f6:	e7 cf       	rjmp	.-50     	; 0x4c6 <vfprintf+0x24>
 4f8:	91 2c       	mov	r9, r1
 4fa:	21 2c       	mov	r2, r1
 4fc:	31 2c       	mov	r3, r1
 4fe:	ff e1       	ldi	r31, 0x1F	; 31
 500:	f3 15       	cp	r31, r3
 502:	d8 f0       	brcs	.+54     	; 0x53a <vfprintf+0x98>
 504:	8b 32       	cpi	r24, 0x2B	; 43
 506:	79 f0       	breq	.+30     	; 0x526 <vfprintf+0x84>
 508:	38 f4       	brcc	.+14     	; 0x518 <vfprintf+0x76>
 50a:	80 32       	cpi	r24, 0x20	; 32
 50c:	79 f0       	breq	.+30     	; 0x52c <vfprintf+0x8a>
 50e:	83 32       	cpi	r24, 0x23	; 35
 510:	a1 f4       	brne	.+40     	; 0x53a <vfprintf+0x98>
 512:	23 2d       	mov	r18, r3
 514:	20 61       	ori	r18, 0x10	; 16
 516:	1d c0       	rjmp	.+58     	; 0x552 <vfprintf+0xb0>
 518:	8d 32       	cpi	r24, 0x2D	; 45
 51a:	61 f0       	breq	.+24     	; 0x534 <vfprintf+0x92>
 51c:	80 33       	cpi	r24, 0x30	; 48
 51e:	69 f4       	brne	.+26     	; 0x53a <vfprintf+0x98>
 520:	23 2d       	mov	r18, r3
 522:	21 60       	ori	r18, 0x01	; 1
 524:	16 c0       	rjmp	.+44     	; 0x552 <vfprintf+0xb0>
 526:	83 2d       	mov	r24, r3
 528:	82 60       	ori	r24, 0x02	; 2
 52a:	38 2e       	mov	r3, r24
 52c:	e3 2d       	mov	r30, r3
 52e:	e4 60       	ori	r30, 0x04	; 4
 530:	3e 2e       	mov	r3, r30
 532:	2a c0       	rjmp	.+84     	; 0x588 <vfprintf+0xe6>
 534:	f3 2d       	mov	r31, r3
 536:	f8 60       	ori	r31, 0x08	; 8
 538:	1d c0       	rjmp	.+58     	; 0x574 <vfprintf+0xd2>
 53a:	37 fc       	sbrc	r3, 7
 53c:	2d c0       	rjmp	.+90     	; 0x598 <vfprintf+0xf6>
 53e:	20 ed       	ldi	r18, 0xD0	; 208
 540:	28 0f       	add	r18, r24
 542:	2a 30       	cpi	r18, 0x0A	; 10
 544:	40 f0       	brcs	.+16     	; 0x556 <vfprintf+0xb4>
 546:	8e 32       	cpi	r24, 0x2E	; 46
 548:	b9 f4       	brne	.+46     	; 0x578 <vfprintf+0xd6>
 54a:	36 fc       	sbrc	r3, 6
 54c:	81 c1       	rjmp	.+770    	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 54e:	23 2d       	mov	r18, r3
 550:	20 64       	ori	r18, 0x40	; 64
 552:	32 2e       	mov	r3, r18
 554:	19 c0       	rjmp	.+50     	; 0x588 <vfprintf+0xe6>
 556:	36 fe       	sbrs	r3, 6
 558:	06 c0       	rjmp	.+12     	; 0x566 <vfprintf+0xc4>
 55a:	8a e0       	ldi	r24, 0x0A	; 10
 55c:	98 9e       	mul	r9, r24
 55e:	20 0d       	add	r18, r0
 560:	11 24       	eor	r1, r1
 562:	92 2e       	mov	r9, r18
 564:	11 c0       	rjmp	.+34     	; 0x588 <vfprintf+0xe6>
 566:	ea e0       	ldi	r30, 0x0A	; 10
 568:	2e 9e       	mul	r2, r30
 56a:	20 0d       	add	r18, r0
 56c:	11 24       	eor	r1, r1
 56e:	22 2e       	mov	r2, r18
 570:	f3 2d       	mov	r31, r3
 572:	f0 62       	ori	r31, 0x20	; 32
 574:	3f 2e       	mov	r3, r31
 576:	08 c0       	rjmp	.+16     	; 0x588 <vfprintf+0xe6>
 578:	8c 36       	cpi	r24, 0x6C	; 108
 57a:	21 f4       	brne	.+8      	; 0x584 <vfprintf+0xe2>
 57c:	83 2d       	mov	r24, r3
 57e:	80 68       	ori	r24, 0x80	; 128
 580:	38 2e       	mov	r3, r24
 582:	02 c0       	rjmp	.+4      	; 0x588 <vfprintf+0xe6>
 584:	88 36       	cpi	r24, 0x68	; 104
 586:	41 f4       	brne	.+16     	; 0x598 <vfprintf+0xf6>
 588:	f7 01       	movw	r30, r14
 58a:	93 fd       	sbrc	r25, 3
 58c:	85 91       	lpm	r24, Z+
 58e:	93 ff       	sbrs	r25, 3
 590:	81 91       	ld	r24, Z+
 592:	7f 01       	movw	r14, r30
 594:	81 11       	cpse	r24, r1
 596:	b3 cf       	rjmp	.-154    	; 0x4fe <vfprintf+0x5c>
 598:	98 2f       	mov	r25, r24
 59a:	9f 7d       	andi	r25, 0xDF	; 223
 59c:	95 54       	subi	r25, 0x45	; 69
 59e:	93 30       	cpi	r25, 0x03	; 3
 5a0:	28 f4       	brcc	.+10     	; 0x5ac <vfprintf+0x10a>
 5a2:	0c 5f       	subi	r16, 0xFC	; 252
 5a4:	1f 4f       	sbci	r17, 0xFF	; 255
 5a6:	9f e3       	ldi	r25, 0x3F	; 63
 5a8:	99 83       	std	Y+1, r25	; 0x01
 5aa:	0d c0       	rjmp	.+26     	; 0x5c6 <vfprintf+0x124>
 5ac:	83 36       	cpi	r24, 0x63	; 99
 5ae:	31 f0       	breq	.+12     	; 0x5bc <vfprintf+0x11a>
 5b0:	83 37       	cpi	r24, 0x73	; 115
 5b2:	71 f0       	breq	.+28     	; 0x5d0 <vfprintf+0x12e>
 5b4:	83 35       	cpi	r24, 0x53	; 83
 5b6:	09 f0       	breq	.+2      	; 0x5ba <vfprintf+0x118>
 5b8:	59 c0       	rjmp	.+178    	; 0x66c <vfprintf+0x1ca>
 5ba:	21 c0       	rjmp	.+66     	; 0x5fe <vfprintf+0x15c>
 5bc:	f8 01       	movw	r30, r16
 5be:	80 81       	ld	r24, Z
 5c0:	89 83       	std	Y+1, r24	; 0x01
 5c2:	0e 5f       	subi	r16, 0xFE	; 254
 5c4:	1f 4f       	sbci	r17, 0xFF	; 255
 5c6:	88 24       	eor	r8, r8
 5c8:	83 94       	inc	r8
 5ca:	91 2c       	mov	r9, r1
 5cc:	53 01       	movw	r10, r6
 5ce:	13 c0       	rjmp	.+38     	; 0x5f6 <vfprintf+0x154>
 5d0:	28 01       	movw	r4, r16
 5d2:	f2 e0       	ldi	r31, 0x02	; 2
 5d4:	4f 0e       	add	r4, r31
 5d6:	51 1c       	adc	r5, r1
 5d8:	f8 01       	movw	r30, r16
 5da:	a0 80       	ld	r10, Z
 5dc:	b1 80       	ldd	r11, Z+1	; 0x01
 5de:	36 fe       	sbrs	r3, 6
 5e0:	03 c0       	rjmp	.+6      	; 0x5e8 <vfprintf+0x146>
 5e2:	69 2d       	mov	r22, r9
 5e4:	70 e0       	ldi	r23, 0x00	; 0
 5e6:	02 c0       	rjmp	.+4      	; 0x5ec <vfprintf+0x14a>
 5e8:	6f ef       	ldi	r22, 0xFF	; 255
 5ea:	7f ef       	ldi	r23, 0xFF	; 255
 5ec:	c5 01       	movw	r24, r10
 5ee:	0e 94 3d 04 	call	0x87a	; 0x87a <strnlen>
 5f2:	4c 01       	movw	r8, r24
 5f4:	82 01       	movw	r16, r4
 5f6:	f3 2d       	mov	r31, r3
 5f8:	ff 77       	andi	r31, 0x7F	; 127
 5fa:	3f 2e       	mov	r3, r31
 5fc:	16 c0       	rjmp	.+44     	; 0x62a <vfprintf+0x188>
 5fe:	28 01       	movw	r4, r16
 600:	22 e0       	ldi	r18, 0x02	; 2
 602:	42 0e       	add	r4, r18
 604:	51 1c       	adc	r5, r1
 606:	f8 01       	movw	r30, r16
 608:	a0 80       	ld	r10, Z
 60a:	b1 80       	ldd	r11, Z+1	; 0x01
 60c:	36 fe       	sbrs	r3, 6
 60e:	03 c0       	rjmp	.+6      	; 0x616 <vfprintf+0x174>
 610:	69 2d       	mov	r22, r9
 612:	70 e0       	ldi	r23, 0x00	; 0
 614:	02 c0       	rjmp	.+4      	; 0x61a <vfprintf+0x178>
 616:	6f ef       	ldi	r22, 0xFF	; 255
 618:	7f ef       	ldi	r23, 0xFF	; 255
 61a:	c5 01       	movw	r24, r10
 61c:	0e 94 32 04 	call	0x864	; 0x864 <strnlen_P>
 620:	4c 01       	movw	r8, r24
 622:	f3 2d       	mov	r31, r3
 624:	f0 68       	ori	r31, 0x80	; 128
 626:	3f 2e       	mov	r3, r31
 628:	82 01       	movw	r16, r4
 62a:	33 fc       	sbrc	r3, 3
 62c:	1b c0       	rjmp	.+54     	; 0x664 <vfprintf+0x1c2>
 62e:	82 2d       	mov	r24, r2
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	88 16       	cp	r8, r24
 634:	99 06       	cpc	r9, r25
 636:	b0 f4       	brcc	.+44     	; 0x664 <vfprintf+0x1c2>
 638:	b6 01       	movw	r22, r12
 63a:	80 e2       	ldi	r24, 0x20	; 32
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	0e 94 48 04 	call	0x890	; 0x890 <fputc>
 642:	2a 94       	dec	r2
 644:	f4 cf       	rjmp	.-24     	; 0x62e <vfprintf+0x18c>
 646:	f5 01       	movw	r30, r10
 648:	37 fc       	sbrc	r3, 7
 64a:	85 91       	lpm	r24, Z+
 64c:	37 fe       	sbrs	r3, 7
 64e:	81 91       	ld	r24, Z+
 650:	5f 01       	movw	r10, r30
 652:	b6 01       	movw	r22, r12
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	0e 94 48 04 	call	0x890	; 0x890 <fputc>
 65a:	21 10       	cpse	r2, r1
 65c:	2a 94       	dec	r2
 65e:	21 e0       	ldi	r18, 0x01	; 1
 660:	82 1a       	sub	r8, r18
 662:	91 08       	sbc	r9, r1
 664:	81 14       	cp	r8, r1
 666:	91 04       	cpc	r9, r1
 668:	71 f7       	brne	.-36     	; 0x646 <vfprintf+0x1a4>
 66a:	e8 c0       	rjmp	.+464    	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 66c:	84 36       	cpi	r24, 0x64	; 100
 66e:	11 f0       	breq	.+4      	; 0x674 <vfprintf+0x1d2>
 670:	89 36       	cpi	r24, 0x69	; 105
 672:	41 f5       	brne	.+80     	; 0x6c4 <vfprintf+0x222>
 674:	f8 01       	movw	r30, r16
 676:	37 fe       	sbrs	r3, 7
 678:	07 c0       	rjmp	.+14     	; 0x688 <vfprintf+0x1e6>
 67a:	60 81       	ld	r22, Z
 67c:	71 81       	ldd	r23, Z+1	; 0x01
 67e:	82 81       	ldd	r24, Z+2	; 0x02
 680:	93 81       	ldd	r25, Z+3	; 0x03
 682:	0c 5f       	subi	r16, 0xFC	; 252
 684:	1f 4f       	sbci	r17, 0xFF	; 255
 686:	08 c0       	rjmp	.+16     	; 0x698 <vfprintf+0x1f6>
 688:	60 81       	ld	r22, Z
 68a:	71 81       	ldd	r23, Z+1	; 0x01
 68c:	07 2e       	mov	r0, r23
 68e:	00 0c       	add	r0, r0
 690:	88 0b       	sbc	r24, r24
 692:	99 0b       	sbc	r25, r25
 694:	0e 5f       	subi	r16, 0xFE	; 254
 696:	1f 4f       	sbci	r17, 0xFF	; 255
 698:	f3 2d       	mov	r31, r3
 69a:	ff 76       	andi	r31, 0x6F	; 111
 69c:	3f 2e       	mov	r3, r31
 69e:	97 ff       	sbrs	r25, 7
 6a0:	09 c0       	rjmp	.+18     	; 0x6b4 <vfprintf+0x212>
 6a2:	90 95       	com	r25
 6a4:	80 95       	com	r24
 6a6:	70 95       	com	r23
 6a8:	61 95       	neg	r22
 6aa:	7f 4f       	sbci	r23, 0xFF	; 255
 6ac:	8f 4f       	sbci	r24, 0xFF	; 255
 6ae:	9f 4f       	sbci	r25, 0xFF	; 255
 6b0:	f0 68       	ori	r31, 0x80	; 128
 6b2:	3f 2e       	mov	r3, r31
 6b4:	2a e0       	ldi	r18, 0x0A	; 10
 6b6:	30 e0       	ldi	r19, 0x00	; 0
 6b8:	a3 01       	movw	r20, r6
 6ba:	0e 94 84 04 	call	0x908	; 0x908 <__ultoa_invert>
 6be:	88 2e       	mov	r8, r24
 6c0:	86 18       	sub	r8, r6
 6c2:	45 c0       	rjmp	.+138    	; 0x74e <vfprintf+0x2ac>
 6c4:	85 37       	cpi	r24, 0x75	; 117
 6c6:	31 f4       	brne	.+12     	; 0x6d4 <vfprintf+0x232>
 6c8:	23 2d       	mov	r18, r3
 6ca:	2f 7e       	andi	r18, 0xEF	; 239
 6cc:	b2 2e       	mov	r11, r18
 6ce:	2a e0       	ldi	r18, 0x0A	; 10
 6d0:	30 e0       	ldi	r19, 0x00	; 0
 6d2:	25 c0       	rjmp	.+74     	; 0x71e <vfprintf+0x27c>
 6d4:	93 2d       	mov	r25, r3
 6d6:	99 7f       	andi	r25, 0xF9	; 249
 6d8:	b9 2e       	mov	r11, r25
 6da:	8f 36       	cpi	r24, 0x6F	; 111
 6dc:	c1 f0       	breq	.+48     	; 0x70e <vfprintf+0x26c>
 6de:	18 f4       	brcc	.+6      	; 0x6e6 <vfprintf+0x244>
 6e0:	88 35       	cpi	r24, 0x58	; 88
 6e2:	79 f0       	breq	.+30     	; 0x702 <vfprintf+0x260>
 6e4:	b5 c0       	rjmp	.+362    	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 6e6:	80 37       	cpi	r24, 0x70	; 112
 6e8:	19 f0       	breq	.+6      	; 0x6f0 <vfprintf+0x24e>
 6ea:	88 37       	cpi	r24, 0x78	; 120
 6ec:	21 f0       	breq	.+8      	; 0x6f6 <vfprintf+0x254>
 6ee:	b0 c0       	rjmp	.+352    	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 6f0:	e9 2f       	mov	r30, r25
 6f2:	e0 61       	ori	r30, 0x10	; 16
 6f4:	be 2e       	mov	r11, r30
 6f6:	b4 fe       	sbrs	r11, 4
 6f8:	0d c0       	rjmp	.+26     	; 0x714 <vfprintf+0x272>
 6fa:	fb 2d       	mov	r31, r11
 6fc:	f4 60       	ori	r31, 0x04	; 4
 6fe:	bf 2e       	mov	r11, r31
 700:	09 c0       	rjmp	.+18     	; 0x714 <vfprintf+0x272>
 702:	34 fe       	sbrs	r3, 4
 704:	0a c0       	rjmp	.+20     	; 0x71a <vfprintf+0x278>
 706:	29 2f       	mov	r18, r25
 708:	26 60       	ori	r18, 0x06	; 6
 70a:	b2 2e       	mov	r11, r18
 70c:	06 c0       	rjmp	.+12     	; 0x71a <vfprintf+0x278>
 70e:	28 e0       	ldi	r18, 0x08	; 8
 710:	30 e0       	ldi	r19, 0x00	; 0
 712:	05 c0       	rjmp	.+10     	; 0x71e <vfprintf+0x27c>
 714:	20 e1       	ldi	r18, 0x10	; 16
 716:	30 e0       	ldi	r19, 0x00	; 0
 718:	02 c0       	rjmp	.+4      	; 0x71e <vfprintf+0x27c>
 71a:	20 e1       	ldi	r18, 0x10	; 16
 71c:	32 e0       	ldi	r19, 0x02	; 2
 71e:	f8 01       	movw	r30, r16
 720:	b7 fe       	sbrs	r11, 7
 722:	07 c0       	rjmp	.+14     	; 0x732 <vfprintf+0x290>
 724:	60 81       	ld	r22, Z
 726:	71 81       	ldd	r23, Z+1	; 0x01
 728:	82 81       	ldd	r24, Z+2	; 0x02
 72a:	93 81       	ldd	r25, Z+3	; 0x03
 72c:	0c 5f       	subi	r16, 0xFC	; 252
 72e:	1f 4f       	sbci	r17, 0xFF	; 255
 730:	06 c0       	rjmp	.+12     	; 0x73e <vfprintf+0x29c>
 732:	60 81       	ld	r22, Z
 734:	71 81       	ldd	r23, Z+1	; 0x01
 736:	80 e0       	ldi	r24, 0x00	; 0
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	0e 5f       	subi	r16, 0xFE	; 254
 73c:	1f 4f       	sbci	r17, 0xFF	; 255
 73e:	a3 01       	movw	r20, r6
 740:	0e 94 84 04 	call	0x908	; 0x908 <__ultoa_invert>
 744:	88 2e       	mov	r8, r24
 746:	86 18       	sub	r8, r6
 748:	fb 2d       	mov	r31, r11
 74a:	ff 77       	andi	r31, 0x7F	; 127
 74c:	3f 2e       	mov	r3, r31
 74e:	36 fe       	sbrs	r3, 6
 750:	0d c0       	rjmp	.+26     	; 0x76c <vfprintf+0x2ca>
 752:	23 2d       	mov	r18, r3
 754:	2e 7f       	andi	r18, 0xFE	; 254
 756:	a2 2e       	mov	r10, r18
 758:	89 14       	cp	r8, r9
 75a:	58 f4       	brcc	.+22     	; 0x772 <vfprintf+0x2d0>
 75c:	34 fe       	sbrs	r3, 4
 75e:	0b c0       	rjmp	.+22     	; 0x776 <vfprintf+0x2d4>
 760:	32 fc       	sbrc	r3, 2
 762:	09 c0       	rjmp	.+18     	; 0x776 <vfprintf+0x2d4>
 764:	83 2d       	mov	r24, r3
 766:	8e 7e       	andi	r24, 0xEE	; 238
 768:	a8 2e       	mov	r10, r24
 76a:	05 c0       	rjmp	.+10     	; 0x776 <vfprintf+0x2d4>
 76c:	b8 2c       	mov	r11, r8
 76e:	a3 2c       	mov	r10, r3
 770:	03 c0       	rjmp	.+6      	; 0x778 <vfprintf+0x2d6>
 772:	b8 2c       	mov	r11, r8
 774:	01 c0       	rjmp	.+2      	; 0x778 <vfprintf+0x2d6>
 776:	b9 2c       	mov	r11, r9
 778:	a4 fe       	sbrs	r10, 4
 77a:	0f c0       	rjmp	.+30     	; 0x79a <vfprintf+0x2f8>
 77c:	fe 01       	movw	r30, r28
 77e:	e8 0d       	add	r30, r8
 780:	f1 1d       	adc	r31, r1
 782:	80 81       	ld	r24, Z
 784:	80 33       	cpi	r24, 0x30	; 48
 786:	21 f4       	brne	.+8      	; 0x790 <vfprintf+0x2ee>
 788:	9a 2d       	mov	r25, r10
 78a:	99 7e       	andi	r25, 0xE9	; 233
 78c:	a9 2e       	mov	r10, r25
 78e:	09 c0       	rjmp	.+18     	; 0x7a2 <vfprintf+0x300>
 790:	a2 fe       	sbrs	r10, 2
 792:	06 c0       	rjmp	.+12     	; 0x7a0 <vfprintf+0x2fe>
 794:	b3 94       	inc	r11
 796:	b3 94       	inc	r11
 798:	04 c0       	rjmp	.+8      	; 0x7a2 <vfprintf+0x300>
 79a:	8a 2d       	mov	r24, r10
 79c:	86 78       	andi	r24, 0x86	; 134
 79e:	09 f0       	breq	.+2      	; 0x7a2 <vfprintf+0x300>
 7a0:	b3 94       	inc	r11
 7a2:	a3 fc       	sbrc	r10, 3
 7a4:	11 c0       	rjmp	.+34     	; 0x7c8 <vfprintf+0x326>
 7a6:	a0 fe       	sbrs	r10, 0
 7a8:	06 c0       	rjmp	.+12     	; 0x7b6 <vfprintf+0x314>
 7aa:	b2 14       	cp	r11, r2
 7ac:	88 f4       	brcc	.+34     	; 0x7d0 <vfprintf+0x32e>
 7ae:	28 0c       	add	r2, r8
 7b0:	92 2c       	mov	r9, r2
 7b2:	9b 18       	sub	r9, r11
 7b4:	0e c0       	rjmp	.+28     	; 0x7d2 <vfprintf+0x330>
 7b6:	b2 14       	cp	r11, r2
 7b8:	60 f4       	brcc	.+24     	; 0x7d2 <vfprintf+0x330>
 7ba:	b6 01       	movw	r22, r12
 7bc:	80 e2       	ldi	r24, 0x20	; 32
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	0e 94 48 04 	call	0x890	; 0x890 <fputc>
 7c4:	b3 94       	inc	r11
 7c6:	f7 cf       	rjmp	.-18     	; 0x7b6 <vfprintf+0x314>
 7c8:	b2 14       	cp	r11, r2
 7ca:	18 f4       	brcc	.+6      	; 0x7d2 <vfprintf+0x330>
 7cc:	2b 18       	sub	r2, r11
 7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <vfprintf+0x332>
 7d0:	98 2c       	mov	r9, r8
 7d2:	21 2c       	mov	r2, r1
 7d4:	a4 fe       	sbrs	r10, 4
 7d6:	10 c0       	rjmp	.+32     	; 0x7f8 <vfprintf+0x356>
 7d8:	b6 01       	movw	r22, r12
 7da:	80 e3       	ldi	r24, 0x30	; 48
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	0e 94 48 04 	call	0x890	; 0x890 <fputc>
 7e2:	a2 fe       	sbrs	r10, 2
 7e4:	17 c0       	rjmp	.+46     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 7e6:	a1 fc       	sbrc	r10, 1
 7e8:	03 c0       	rjmp	.+6      	; 0x7f0 <vfprintf+0x34e>
 7ea:	88 e7       	ldi	r24, 0x78	; 120
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	02 c0       	rjmp	.+4      	; 0x7f4 <vfprintf+0x352>
 7f0:	88 e5       	ldi	r24, 0x58	; 88
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	b6 01       	movw	r22, r12
 7f6:	0c c0       	rjmp	.+24     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 7f8:	8a 2d       	mov	r24, r10
 7fa:	86 78       	andi	r24, 0x86	; 134
 7fc:	59 f0       	breq	.+22     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 7fe:	a1 fe       	sbrs	r10, 1
 800:	02 c0       	rjmp	.+4      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 802:	8b e2       	ldi	r24, 0x2B	; 43
 804:	01 c0       	rjmp	.+2      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 806:	80 e2       	ldi	r24, 0x20	; 32
 808:	a7 fc       	sbrc	r10, 7
 80a:	8d e2       	ldi	r24, 0x2D	; 45
 80c:	b6 01       	movw	r22, r12
 80e:	90 e0       	ldi	r25, 0x00	; 0
 810:	0e 94 48 04 	call	0x890	; 0x890 <fputc>
 814:	89 14       	cp	r8, r9
 816:	38 f4       	brcc	.+14     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 818:	b6 01       	movw	r22, r12
 81a:	80 e3       	ldi	r24, 0x30	; 48
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	0e 94 48 04 	call	0x890	; 0x890 <fputc>
 822:	9a 94       	dec	r9
 824:	f7 cf       	rjmp	.-18     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 826:	8a 94       	dec	r8
 828:	f3 01       	movw	r30, r6
 82a:	e8 0d       	add	r30, r8
 82c:	f1 1d       	adc	r31, r1
 82e:	80 81       	ld	r24, Z
 830:	b6 01       	movw	r22, r12
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	0e 94 48 04 	call	0x890	; 0x890 <fputc>
 838:	81 10       	cpse	r8, r1
 83a:	f5 cf       	rjmp	.-22     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 83c:	22 20       	and	r2, r2
 83e:	09 f4       	brne	.+2      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 840:	42 ce       	rjmp	.-892    	; 0x4c6 <vfprintf+0x24>
 842:	b6 01       	movw	r22, r12
 844:	80 e2       	ldi	r24, 0x20	; 32
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	0e 94 48 04 	call	0x890	; 0x890 <fputc>
 84c:	2a 94       	dec	r2
 84e:	f6 cf       	rjmp	.-20     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 850:	f6 01       	movw	r30, r12
 852:	86 81       	ldd	r24, Z+6	; 0x06
 854:	97 81       	ldd	r25, Z+7	; 0x07
 856:	02 c0       	rjmp	.+4      	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
 858:	8f ef       	ldi	r24, 0xFF	; 255
 85a:	9f ef       	ldi	r25, 0xFF	; 255
 85c:	2b 96       	adiw	r28, 0x0b	; 11
 85e:	e2 e1       	ldi	r30, 0x12	; 18
 860:	0c 94 fe 04 	jmp	0x9fc	; 0x9fc <__epilogue_restores__>

00000864 <strnlen_P>:
 864:	fc 01       	movw	r30, r24
 866:	05 90       	lpm	r0, Z+
 868:	61 50       	subi	r22, 0x01	; 1
 86a:	70 40       	sbci	r23, 0x00	; 0
 86c:	01 10       	cpse	r0, r1
 86e:	d8 f7       	brcc	.-10     	; 0x866 <strnlen_P+0x2>
 870:	80 95       	com	r24
 872:	90 95       	com	r25
 874:	8e 0f       	add	r24, r30
 876:	9f 1f       	adc	r25, r31
 878:	08 95       	ret

0000087a <strnlen>:
 87a:	fc 01       	movw	r30, r24
 87c:	61 50       	subi	r22, 0x01	; 1
 87e:	70 40       	sbci	r23, 0x00	; 0
 880:	01 90       	ld	r0, Z+
 882:	01 10       	cpse	r0, r1
 884:	d8 f7       	brcc	.-10     	; 0x87c <strnlen+0x2>
 886:	80 95       	com	r24
 888:	90 95       	com	r25
 88a:	8e 0f       	add	r24, r30
 88c:	9f 1f       	adc	r25, r31
 88e:	08 95       	ret

00000890 <fputc>:
 890:	0f 93       	push	r16
 892:	1f 93       	push	r17
 894:	cf 93       	push	r28
 896:	df 93       	push	r29
 898:	fb 01       	movw	r30, r22
 89a:	23 81       	ldd	r18, Z+3	; 0x03
 89c:	21 fd       	sbrc	r18, 1
 89e:	03 c0       	rjmp	.+6      	; 0x8a6 <fputc+0x16>
 8a0:	8f ef       	ldi	r24, 0xFF	; 255
 8a2:	9f ef       	ldi	r25, 0xFF	; 255
 8a4:	2c c0       	rjmp	.+88     	; 0x8fe <fputc+0x6e>
 8a6:	22 ff       	sbrs	r18, 2
 8a8:	16 c0       	rjmp	.+44     	; 0x8d6 <fputc+0x46>
 8aa:	46 81       	ldd	r20, Z+6	; 0x06
 8ac:	57 81       	ldd	r21, Z+7	; 0x07
 8ae:	24 81       	ldd	r18, Z+4	; 0x04
 8b0:	35 81       	ldd	r19, Z+5	; 0x05
 8b2:	42 17       	cp	r20, r18
 8b4:	53 07       	cpc	r21, r19
 8b6:	44 f4       	brge	.+16     	; 0x8c8 <fputc+0x38>
 8b8:	a0 81       	ld	r26, Z
 8ba:	b1 81       	ldd	r27, Z+1	; 0x01
 8bc:	9d 01       	movw	r18, r26
 8be:	2f 5f       	subi	r18, 0xFF	; 255
 8c0:	3f 4f       	sbci	r19, 0xFF	; 255
 8c2:	31 83       	std	Z+1, r19	; 0x01
 8c4:	20 83       	st	Z, r18
 8c6:	8c 93       	st	X, r24
 8c8:	26 81       	ldd	r18, Z+6	; 0x06
 8ca:	37 81       	ldd	r19, Z+7	; 0x07
 8cc:	2f 5f       	subi	r18, 0xFF	; 255
 8ce:	3f 4f       	sbci	r19, 0xFF	; 255
 8d0:	37 83       	std	Z+7, r19	; 0x07
 8d2:	26 83       	std	Z+6, r18	; 0x06
 8d4:	14 c0       	rjmp	.+40     	; 0x8fe <fputc+0x6e>
 8d6:	8b 01       	movw	r16, r22
 8d8:	ec 01       	movw	r28, r24
 8da:	fb 01       	movw	r30, r22
 8dc:	00 84       	ldd	r0, Z+8	; 0x08
 8de:	f1 85       	ldd	r31, Z+9	; 0x09
 8e0:	e0 2d       	mov	r30, r0
 8e2:	09 95       	icall
 8e4:	89 2b       	or	r24, r25
 8e6:	e1 f6       	brne	.-72     	; 0x8a0 <fputc+0x10>
 8e8:	d8 01       	movw	r26, r16
 8ea:	16 96       	adiw	r26, 0x06	; 6
 8ec:	8d 91       	ld	r24, X+
 8ee:	9c 91       	ld	r25, X
 8f0:	17 97       	sbiw	r26, 0x07	; 7
 8f2:	01 96       	adiw	r24, 0x01	; 1
 8f4:	17 96       	adiw	r26, 0x07	; 7
 8f6:	9c 93       	st	X, r25
 8f8:	8e 93       	st	-X, r24
 8fa:	16 97       	sbiw	r26, 0x06	; 6
 8fc:	ce 01       	movw	r24, r28
 8fe:	df 91       	pop	r29
 900:	cf 91       	pop	r28
 902:	1f 91       	pop	r17
 904:	0f 91       	pop	r16
 906:	08 95       	ret

00000908 <__ultoa_invert>:
 908:	fa 01       	movw	r30, r20
 90a:	aa 27       	eor	r26, r26
 90c:	28 30       	cpi	r18, 0x08	; 8
 90e:	51 f1       	breq	.+84     	; 0x964 <__ultoa_invert+0x5c>
 910:	20 31       	cpi	r18, 0x10	; 16
 912:	81 f1       	breq	.+96     	; 0x974 <__ultoa_invert+0x6c>
 914:	e8 94       	clt
 916:	6f 93       	push	r22
 918:	6e 7f       	andi	r22, 0xFE	; 254
 91a:	6e 5f       	subi	r22, 0xFE	; 254
 91c:	7f 4f       	sbci	r23, 0xFF	; 255
 91e:	8f 4f       	sbci	r24, 0xFF	; 255
 920:	9f 4f       	sbci	r25, 0xFF	; 255
 922:	af 4f       	sbci	r26, 0xFF	; 255
 924:	b1 e0       	ldi	r27, 0x01	; 1
 926:	3e d0       	rcall	.+124    	; 0x9a4 <__ultoa_invert+0x9c>
 928:	b4 e0       	ldi	r27, 0x04	; 4
 92a:	3c d0       	rcall	.+120    	; 0x9a4 <__ultoa_invert+0x9c>
 92c:	67 0f       	add	r22, r23
 92e:	78 1f       	adc	r23, r24
 930:	89 1f       	adc	r24, r25
 932:	9a 1f       	adc	r25, r26
 934:	a1 1d       	adc	r26, r1
 936:	68 0f       	add	r22, r24
 938:	79 1f       	adc	r23, r25
 93a:	8a 1f       	adc	r24, r26
 93c:	91 1d       	adc	r25, r1
 93e:	a1 1d       	adc	r26, r1
 940:	6a 0f       	add	r22, r26
 942:	71 1d       	adc	r23, r1
 944:	81 1d       	adc	r24, r1
 946:	91 1d       	adc	r25, r1
 948:	a1 1d       	adc	r26, r1
 94a:	20 d0       	rcall	.+64     	; 0x98c <__ultoa_invert+0x84>
 94c:	09 f4       	brne	.+2      	; 0x950 <__ultoa_invert+0x48>
 94e:	68 94       	set
 950:	3f 91       	pop	r19
 952:	2a e0       	ldi	r18, 0x0A	; 10
 954:	26 9f       	mul	r18, r22
 956:	11 24       	eor	r1, r1
 958:	30 19       	sub	r19, r0
 95a:	30 5d       	subi	r19, 0xD0	; 208
 95c:	31 93       	st	Z+, r19
 95e:	de f6       	brtc	.-74     	; 0x916 <__ultoa_invert+0xe>
 960:	cf 01       	movw	r24, r30
 962:	08 95       	ret
 964:	46 2f       	mov	r20, r22
 966:	47 70       	andi	r20, 0x07	; 7
 968:	40 5d       	subi	r20, 0xD0	; 208
 96a:	41 93       	st	Z+, r20
 96c:	b3 e0       	ldi	r27, 0x03	; 3
 96e:	0f d0       	rcall	.+30     	; 0x98e <__ultoa_invert+0x86>
 970:	c9 f7       	brne	.-14     	; 0x964 <__ultoa_invert+0x5c>
 972:	f6 cf       	rjmp	.-20     	; 0x960 <__ultoa_invert+0x58>
 974:	46 2f       	mov	r20, r22
 976:	4f 70       	andi	r20, 0x0F	; 15
 978:	40 5d       	subi	r20, 0xD0	; 208
 97a:	4a 33       	cpi	r20, 0x3A	; 58
 97c:	18 f0       	brcs	.+6      	; 0x984 <__ultoa_invert+0x7c>
 97e:	49 5d       	subi	r20, 0xD9	; 217
 980:	31 fd       	sbrc	r19, 1
 982:	40 52       	subi	r20, 0x20	; 32
 984:	41 93       	st	Z+, r20
 986:	02 d0       	rcall	.+4      	; 0x98c <__ultoa_invert+0x84>
 988:	a9 f7       	brne	.-22     	; 0x974 <__ultoa_invert+0x6c>
 98a:	ea cf       	rjmp	.-44     	; 0x960 <__ultoa_invert+0x58>
 98c:	b4 e0       	ldi	r27, 0x04	; 4
 98e:	a6 95       	lsr	r26
 990:	97 95       	ror	r25
 992:	87 95       	ror	r24
 994:	77 95       	ror	r23
 996:	67 95       	ror	r22
 998:	ba 95       	dec	r27
 99a:	c9 f7       	brne	.-14     	; 0x98e <__ultoa_invert+0x86>
 99c:	00 97       	sbiw	r24, 0x00	; 0
 99e:	61 05       	cpc	r22, r1
 9a0:	71 05       	cpc	r23, r1
 9a2:	08 95       	ret
 9a4:	9b 01       	movw	r18, r22
 9a6:	ac 01       	movw	r20, r24
 9a8:	0a 2e       	mov	r0, r26
 9aa:	06 94       	lsr	r0
 9ac:	57 95       	ror	r21
 9ae:	47 95       	ror	r20
 9b0:	37 95       	ror	r19
 9b2:	27 95       	ror	r18
 9b4:	ba 95       	dec	r27
 9b6:	c9 f7       	brne	.-14     	; 0x9aa <__ultoa_invert+0xa2>
 9b8:	62 0f       	add	r22, r18
 9ba:	73 1f       	adc	r23, r19
 9bc:	84 1f       	adc	r24, r20
 9be:	95 1f       	adc	r25, r21
 9c0:	a0 1d       	adc	r26, r0
 9c2:	08 95       	ret

000009c4 <__prologue_saves__>:
 9c4:	2f 92       	push	r2
 9c6:	3f 92       	push	r3
 9c8:	4f 92       	push	r4
 9ca:	5f 92       	push	r5
 9cc:	6f 92       	push	r6
 9ce:	7f 92       	push	r7
 9d0:	8f 92       	push	r8
 9d2:	9f 92       	push	r9
 9d4:	af 92       	push	r10
 9d6:	bf 92       	push	r11
 9d8:	cf 92       	push	r12
 9da:	df 92       	push	r13
 9dc:	ef 92       	push	r14
 9de:	ff 92       	push	r15
 9e0:	0f 93       	push	r16
 9e2:	1f 93       	push	r17
 9e4:	cf 93       	push	r28
 9e6:	df 93       	push	r29
 9e8:	cd b7       	in	r28, 0x3d	; 61
 9ea:	de b7       	in	r29, 0x3e	; 62
 9ec:	ca 1b       	sub	r28, r26
 9ee:	db 0b       	sbc	r29, r27
 9f0:	0f b6       	in	r0, 0x3f	; 63
 9f2:	f8 94       	cli
 9f4:	de bf       	out	0x3e, r29	; 62
 9f6:	0f be       	out	0x3f, r0	; 63
 9f8:	cd bf       	out	0x3d, r28	; 61
 9fa:	09 94       	ijmp

000009fc <__epilogue_restores__>:
 9fc:	2a 88       	ldd	r2, Y+18	; 0x12
 9fe:	39 88       	ldd	r3, Y+17	; 0x11
 a00:	48 88       	ldd	r4, Y+16	; 0x10
 a02:	5f 84       	ldd	r5, Y+15	; 0x0f
 a04:	6e 84       	ldd	r6, Y+14	; 0x0e
 a06:	7d 84       	ldd	r7, Y+13	; 0x0d
 a08:	8c 84       	ldd	r8, Y+12	; 0x0c
 a0a:	9b 84       	ldd	r9, Y+11	; 0x0b
 a0c:	aa 84       	ldd	r10, Y+10	; 0x0a
 a0e:	b9 84       	ldd	r11, Y+9	; 0x09
 a10:	c8 84       	ldd	r12, Y+8	; 0x08
 a12:	df 80       	ldd	r13, Y+7	; 0x07
 a14:	ee 80       	ldd	r14, Y+6	; 0x06
 a16:	fd 80       	ldd	r15, Y+5	; 0x05
 a18:	0c 81       	ldd	r16, Y+4	; 0x04
 a1a:	1b 81       	ldd	r17, Y+3	; 0x03
 a1c:	aa 81       	ldd	r26, Y+2	; 0x02
 a1e:	b9 81       	ldd	r27, Y+1	; 0x01
 a20:	ce 0f       	add	r28, r30
 a22:	d1 1d       	adc	r29, r1
 a24:	0f b6       	in	r0, 0x3f	; 63
 a26:	f8 94       	cli
 a28:	de bf       	out	0x3e, r29	; 62
 a2a:	0f be       	out	0x3f, r0	; 63
 a2c:	cd bf       	out	0x3d, r28	; 61
 a2e:	ed 01       	movw	r28, r26
 a30:	08 95       	ret

00000a32 <_exit>:
 a32:	f8 94       	cli

00000a34 <__stop_program>:
 a34:	ff cf       	rjmp	.-2      	; 0xa34 <__stop_program>
