
Master_pj1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00001120  000011b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001120  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  0080012e  0080012e  000011e2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000011e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001240  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00001280  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014f5  00000000  00000000  00001378  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a48  00000000  00000000  0000286d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b70  00000000  00000000  000032b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d4  00000000  00000000  00003e28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000062b  00000000  00000000  00003ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000087c  00000000  00000000  00004627  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00004ea3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e0 e2       	ldi	r30, 0x20	; 32
      7c:	f1 e1       	ldi	r31, 0x11	; 17
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ae 32       	cpi	r26, 0x2E	; 46
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	ae e2       	ldi	r26, 0x2E	; 46
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a2 35       	cpi	r26, 0x52	; 82
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 39 02 	call	0x472	; 0x472 <main>
      9e:	0c 94 8e 08 	jmp	0x111c	; 0x111c <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initUART9600>:
 *  Author: njfg0
 */ 
#include "com_uart.h"
void initUART9600(void){
	//configurar pines tx y rx
	DDRD &=~(1<<DDD0);//entrada
      a6:	8a b1       	in	r24, 0x0a	; 10
      a8:	8e 7f       	andi	r24, 0xFE	; 254
      aa:	8a b9       	out	0x0a, r24	; 10
	DDRD|=(1<<DDD1);//salida Tx
      ac:	8a b1       	in	r24, 0x0a	; 10
      ae:	82 60       	ori	r24, 0x02	; 2
      b0:	8a b9       	out	0x0a, r24	; 10
	
	UBRR0H = 0;
      b2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = 103;
      b6:	87 e6       	ldi	r24, 0x67	; 103
      b8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	//configurar registro A modo fast u2x0 en 1
	UCSR0A=0;
      bc:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	//UCSR0A|=(1<<U2X0);
	
	//configurar registro B, habilotar isr rx, bits para habilitar RX y TX
	UCSR0B=0;
      c0:	e1 ec       	ldi	r30, 0xC1	; 193
      c2:	f0 e0       	ldi	r31, 0x00	; 0
      c4:	10 82       	st	Z, r1
	UCSR0B|=(1<<TXEN0);
      c6:	80 81       	ld	r24, Z
      c8:	88 60       	ori	r24, 0x08	; 8
      ca:	80 83       	st	Z, r24
	
	//Configurar registro C<Frame asincrono 8 bits de datos sin pariedad, 1 bit de stop
	UCSR0C=0;
      cc:	e2 ec       	ldi	r30, 0xC2	; 194
      ce:	f0 e0       	ldi	r31, 0x00	; 0
      d0:	10 82       	st	Z, r1
	UCSR0C|=(1<<UCSZ01)|(1<<UCSZ00);
      d2:	80 81       	ld	r24, Z
      d4:	86 60       	ori	r24, 0x06	; 6
      d6:	80 83       	st	Z, r24
      d8:	08 95       	ret

000000da <writetxtUART>:
	
	
	
}

void writetxtUART(char* texto){
      da:	ac 01       	movw	r20, r24
	uint8_t i;
	for (i=0;texto[i]!='\0';i++){
      dc:	20 e0       	ldi	r18, 0x00	; 0
      de:	07 c0       	rjmp	.+14     	; 0xee <writetxtUART+0x14>
		while(!(UCSR0A&(1<<UDRE0)));//esperar hasta que el udre0 esté en 1
      e0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
      e4:	95 ff       	sbrs	r25, 5
      e6:	fc cf       	rjmp	.-8      	; 0xe0 <writetxtUART+0x6>
		UDR0=texto[i];//cuando i nulo se acaba
      e8:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	
}

void writetxtUART(char* texto){
	uint8_t i;
	for (i=0;texto[i]!='\0';i++){
      ec:	2f 5f       	subi	r18, 0xFF	; 255
      ee:	fa 01       	movw	r30, r20
      f0:	e2 0f       	add	r30, r18
      f2:	f1 1d       	adc	r31, r1
      f4:	30 81       	ld	r19, Z
      f6:	31 11       	cpse	r19, r1
      f8:	f3 cf       	rjmp	.-26     	; 0xe0 <writetxtUART+0x6>
		while(!(UCSR0A&(1<<UDRE0)));//esperar hasta que el udre0 esté en 1
		UDR0=texto[i];//cuando i nulo se acaba
	}
}
      fa:	08 95       	ret

000000fc <I2C_Master_Init>:
		}else{
		return estado;
	}
	
	
}
      fc:	0f 93       	push	r16
      fe:	1f 93       	push	r17
     100:	cf 93       	push	r28
     102:	8b 01       	movw	r16, r22
     104:	9c 01       	movw	r18, r24
     106:	c4 2f       	mov	r28, r20
     108:	87 b1       	in	r24, 0x07	; 7
     10a:	8f 7c       	andi	r24, 0xCF	; 207
     10c:	87 b9       	out	0x07, r24	; 7
     10e:	44 30       	cpi	r20, 0x04	; 4
     110:	79 f0       	breq	.+30     	; 0x130 <I2C_Master_Init+0x34>
     112:	18 f4       	brcc	.+6      	; 0x11a <I2C_Master_Init+0x1e>
     114:	41 30       	cpi	r20, 0x01	; 1
     116:	31 f0       	breq	.+12     	; 0x124 <I2C_Master_Init+0x28>
     118:	23 c0       	rjmp	.+70     	; 0x160 <I2C_Master_Init+0x64>
     11a:	40 31       	cpi	r20, 0x10	; 16
     11c:	91 f0       	breq	.+36     	; 0x142 <I2C_Master_Init+0x46>
     11e:	40 34       	cpi	r20, 0x40	; 64
     120:	c9 f0       	breq	.+50     	; 0x154 <I2C_Master_Init+0x58>
     122:	1e c0       	rjmp	.+60     	; 0x160 <I2C_Master_Init+0x64>
     124:	e9 eb       	ldi	r30, 0xB9	; 185
     126:	f0 e0       	ldi	r31, 0x00	; 0
     128:	80 81       	ld	r24, Z
     12a:	8c 7f       	andi	r24, 0xFC	; 252
     12c:	80 83       	st	Z, r24
     12e:	1e c0       	rjmp	.+60     	; 0x16c <I2C_Master_Init+0x70>
     130:	e9 eb       	ldi	r30, 0xB9	; 185
     132:	f0 e0       	ldi	r31, 0x00	; 0
     134:	80 81       	ld	r24, Z
     136:	8d 7f       	andi	r24, 0xFD	; 253
     138:	80 83       	st	Z, r24
     13a:	80 81       	ld	r24, Z
     13c:	81 60       	ori	r24, 0x01	; 1
     13e:	80 83       	st	Z, r24
     140:	15 c0       	rjmp	.+42     	; 0x16c <I2C_Master_Init+0x70>
     142:	e9 eb       	ldi	r30, 0xB9	; 185
     144:	f0 e0       	ldi	r31, 0x00	; 0
     146:	80 81       	ld	r24, Z
     148:	8e 7f       	andi	r24, 0xFE	; 254
     14a:	80 83       	st	Z, r24
     14c:	80 81       	ld	r24, Z
     14e:	82 60       	ori	r24, 0x02	; 2
     150:	80 83       	st	Z, r24
     152:	0c c0       	rjmp	.+24     	; 0x16c <I2C_Master_Init+0x70>
     154:	e9 eb       	ldi	r30, 0xB9	; 185
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	83 60       	ori	r24, 0x03	; 3
     15c:	80 83       	st	Z, r24
     15e:	06 c0       	rjmp	.+12     	; 0x16c <I2C_Master_Init+0x70>
     160:	e9 eb       	ldi	r30, 0xB9	; 185
     162:	f0 e0       	ldi	r31, 0x00	; 0
     164:	80 81       	ld	r24, Z
     166:	8c 7f       	andi	r24, 0xFC	; 252
     168:	80 83       	st	Z, r24
     16a:	c1 e0       	ldi	r28, 0x01	; 1
     16c:	60 e0       	ldi	r22, 0x00	; 0
     16e:	74 e2       	ldi	r23, 0x24	; 36
     170:	84 ef       	ldi	r24, 0xF4	; 244
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	a9 01       	movw	r20, r18
     176:	98 01       	movw	r18, r16
     178:	0e 94 73 05 	call	0xae6	; 0xae6 <__udivmodsi4>
     17c:	ca 01       	movw	r24, r20
     17e:	b9 01       	movw	r22, r18
     180:	60 51       	subi	r22, 0x10	; 16
     182:	71 09       	sbc	r23, r1
     184:	81 09       	sbc	r24, r1
     186:	91 09       	sbc	r25, r1
     188:	4c 2f       	mov	r20, r28
     18a:	50 e0       	ldi	r21, 0x00	; 0
     18c:	9a 01       	movw	r18, r20
     18e:	22 0f       	add	r18, r18
     190:	33 1f       	adc	r19, r19
     192:	03 2e       	mov	r0, r19
     194:	00 0c       	add	r0, r0
     196:	44 0b       	sbc	r20, r20
     198:	55 0b       	sbc	r21, r21
     19a:	0e 94 73 05 	call	0xae6	; 0xae6 <__udivmodsi4>
     19e:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
     1a2:	ec eb       	ldi	r30, 0xBC	; 188
     1a4:	f0 e0       	ldi	r31, 0x00	; 0
     1a6:	80 81       	ld	r24, Z
     1a8:	84 60       	ori	r24, 0x04	; 4
     1aa:	80 83       	st	Z, r24
     1ac:	cf 91       	pop	r28
     1ae:	1f 91       	pop	r17
     1b0:	0f 91       	pop	r16
     1b2:	08 95       	ret

000001b4 <I2C_Master_Start>:
     1b4:	84 ea       	ldi	r24, 0xA4	; 164
     1b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1ba:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1be:	88 23       	and	r24, r24
     1c0:	e4 f7       	brge	.-8      	; 0x1ba <I2C_Master_Start+0x6>
     1c2:	08 95       	ret

000001c4 <I2C_Master_Stop>:
     1c4:	84 e9       	ldi	r24, 0x94	; 148
     1c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1ca:	08 95       	ret

000001cc <I2C_Master_Write>:
     1cc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     1d0:	84 e8       	ldi	r24, 0x84	; 132
     1d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1d6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1da:	88 23       	and	r24, r24
     1dc:	e4 f7       	brge	.-8      	; 0x1d6 <I2C_Master_Write+0xa>
     1de:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     1e2:	88 7f       	andi	r24, 0xF8	; 248
     1e4:	88 31       	cpi	r24, 0x18	; 24
     1e6:	31 f0       	breq	.+12     	; 0x1f4 <I2C_Master_Write+0x28>
     1e8:	88 32       	cpi	r24, 0x28	; 40
     1ea:	31 f0       	breq	.+12     	; 0x1f8 <I2C_Master_Write+0x2c>
     1ec:	80 34       	cpi	r24, 0x40	; 64
     1ee:	29 f4       	brne	.+10     	; 0x1fa <I2C_Master_Write+0x2e>
     1f0:	81 e0       	ldi	r24, 0x01	; 1
     1f2:	08 95       	ret
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	08 95       	ret
     1f8:	81 e0       	ldi	r24, 0x01	; 1
     1fa:	08 95       	ret

000001fc <I2C_Master_Read>:

uint8_t I2C_Master_Read(uint8_t *buffer, uint8_t ack){
     1fc:	dc 01       	movw	r26, r24
	uint8_t estado;
	if(ack){
     1fe:	66 23       	and	r22, r22
     200:	31 f0       	breq	.+12     	; 0x20e <I2C_Master_Read+0x12>
		TWCR|=(1<<TWEA);
     202:	ec eb       	ldi	r30, 0xBC	; 188
     204:	f0 e0       	ldi	r31, 0x00	; 0
     206:	90 81       	ld	r25, Z
     208:	90 64       	ori	r25, 0x40	; 64
     20a:	90 83       	st	Z, r25
     20c:	05 c0       	rjmp	.+10     	; 0x218 <I2C_Master_Read+0x1c>
		}else{
		TWCR&=~(1<<TWEA);
     20e:	ec eb       	ldi	r30, 0xBC	; 188
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	90 81       	ld	r25, Z
     214:	9f 7b       	andi	r25, 0xBF	; 191
     216:	90 83       	st	Z, r25
	}
	
	TWCR|=(1<<TWINT);//INICIA LECTURA
     218:	ec eb       	ldi	r30, 0xBC	; 188
     21a:	f0 e0       	ldi	r31, 0x00	; 0
     21c:	90 81       	ld	r25, Z
     21e:	90 68       	ori	r25, 0x80	; 128
     220:	90 83       	st	Z, r25
	while(!(TWCR&(1<<TWINT)));//ESPERA A TERMINAR DE LEER
     222:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     226:	99 23       	and	r25, r25
     228:	e4 f7       	brge	.-8      	; 0x222 <I2C_Master_Read+0x26>
	estado=TWSR&0xF8; //VERIFICAR ESTADO
     22a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     22e:	98 7f       	andi	r25, 0xF8	; 248
	
	//verifica si el dato fue ledio con ACK o sin ACK
	if(estado==0x58||estado==0x50){
     230:	98 35       	cpi	r25, 0x58	; 88
     232:	11 f0       	breq	.+4      	; 0x238 <I2C_Master_Read+0x3c>
     234:	90 35       	cpi	r25, 0x50	; 80
     236:	29 f4       	brne	.+10     	; 0x242 <I2C_Master_Read+0x46>
		*buffer=TWDR;
     238:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     23c:	8c 93       	st	X, r24
		return 1;
     23e:	81 e0       	ldi	r24, 0x01	; 1
     240:	08 95       	ret
		}else{
		return estado;
     242:	89 2f       	mov	r24, r25
	}
}
     244:	08 95       	ret

00000246 <port_disp>:
	//E=0;
	PORTD&=~(1<<PORTD3);
}

void port_disp(char a){
	if (a&1)
     246:	80 ff       	sbrs	r24, 0
     248:	04 c0       	rjmp	.+8      	; 0x252 <port_disp+0xc>
	PORTD|=(1<<PORTD4);
     24a:	9b b1       	in	r25, 0x0b	; 11
     24c:	90 61       	ori	r25, 0x10	; 16
     24e:	9b b9       	out	0x0b, r25	; 11
     250:	03 c0       	rjmp	.+6      	; 0x258 <port_disp+0x12>
	else
	PORTD&=~(1<<PORTD4);
     252:	9b b1       	in	r25, 0x0b	; 11
     254:	9f 7e       	andi	r25, 0xEF	; 239
     256:	9b b9       	out	0x0b, r25	; 11
	
	if (a&2)
     258:	81 ff       	sbrs	r24, 1
     25a:	04 c0       	rjmp	.+8      	; 0x264 <port_disp+0x1e>
	PORTD|=(1<<PORTD5);
     25c:	9b b1       	in	r25, 0x0b	; 11
     25e:	90 62       	ori	r25, 0x20	; 32
     260:	9b b9       	out	0x0b, r25	; 11
     262:	03 c0       	rjmp	.+6      	; 0x26a <port_disp+0x24>
	else
	PORTD&=~(1<<PORTD5);
     264:	9b b1       	in	r25, 0x0b	; 11
     266:	9f 7d       	andi	r25, 0xDF	; 223
     268:	9b b9       	out	0x0b, r25	; 11
	
	if (a&4)
     26a:	82 ff       	sbrs	r24, 2
     26c:	04 c0       	rjmp	.+8      	; 0x276 <port_disp+0x30>
	PORTD|=(1<<PORTD6);
     26e:	9b b1       	in	r25, 0x0b	; 11
     270:	90 64       	ori	r25, 0x40	; 64
     272:	9b b9       	out	0x0b, r25	; 11
     274:	03 c0       	rjmp	.+6      	; 0x27c <port_disp+0x36>
	else
	PORTD&=~(1<<PORTD6);
     276:	9b b1       	in	r25, 0x0b	; 11
     278:	9f 7b       	andi	r25, 0xBF	; 191
     27a:	9b b9       	out	0x0b, r25	; 11
	
	if (a&8)
     27c:	83 ff       	sbrs	r24, 3
     27e:	04 c0       	rjmp	.+8      	; 0x288 <port_disp+0x42>
	PORTD|=(1<<PORTD7);
     280:	9b b1       	in	r25, 0x0b	; 11
     282:	90 68       	ori	r25, 0x80	; 128
     284:	9b b9       	out	0x0b, r25	; 11
     286:	03 c0       	rjmp	.+6      	; 0x28e <port_disp+0x48>
	else
	PORTD&=~(1<<PORTD7);
     288:	9b b1       	in	r25, 0x0b	; 11
     28a:	9f 77       	andi	r25, 0x7F	; 127
     28c:	9b b9       	out	0x0b, r25	; 11
	
	if (a&16)
     28e:	84 ff       	sbrs	r24, 4
     290:	04 c0       	rjmp	.+8      	; 0x29a <port_disp+0x54>
	PORTB|=(1<<PORTB0);
     292:	95 b1       	in	r25, 0x05	; 5
     294:	91 60       	ori	r25, 0x01	; 1
     296:	95 b9       	out	0x05, r25	; 5
     298:	03 c0       	rjmp	.+6      	; 0x2a0 <port_disp+0x5a>
	else
	PORTB&=~(1<<PORTB0);
     29a:	95 b1       	in	r25, 0x05	; 5
     29c:	9e 7f       	andi	r25, 0xFE	; 254
     29e:	95 b9       	out	0x05, r25	; 5
	
	if (a&32)
     2a0:	85 ff       	sbrs	r24, 5
     2a2:	04 c0       	rjmp	.+8      	; 0x2ac <port_disp+0x66>
	PORTB|=(1<<PORTB1);
     2a4:	95 b1       	in	r25, 0x05	; 5
     2a6:	92 60       	ori	r25, 0x02	; 2
     2a8:	95 b9       	out	0x05, r25	; 5
     2aa:	03 c0       	rjmp	.+6      	; 0x2b2 <port_disp+0x6c>
	else
	PORTB&=~(1<<PORTB1);
     2ac:	95 b1       	in	r25, 0x05	; 5
     2ae:	9d 7f       	andi	r25, 0xFD	; 253
     2b0:	95 b9       	out	0x05, r25	; 5
	
	if (a&64)
     2b2:	86 ff       	sbrs	r24, 6
     2b4:	04 c0       	rjmp	.+8      	; 0x2be <port_disp+0x78>
	PORTB|=(1<<PORTB2);
     2b6:	95 b1       	in	r25, 0x05	; 5
     2b8:	94 60       	ori	r25, 0x04	; 4
     2ba:	95 b9       	out	0x05, r25	; 5
     2bc:	03 c0       	rjmp	.+6      	; 0x2c4 <port_disp+0x7e>
	else
	PORTB&=~(1<<PORTB2);
     2be:	95 b1       	in	r25, 0x05	; 5
     2c0:	9b 7f       	andi	r25, 0xFB	; 251
     2c2:	95 b9       	out	0x05, r25	; 5
	
	if (a&128)
     2c4:	88 23       	and	r24, r24
     2c6:	24 f4       	brge	.+8      	; 0x2d0 <port_disp+0x8a>
	PORTB|=(1<<PORTB3);
     2c8:	85 b1       	in	r24, 0x05	; 5
     2ca:	88 60       	ori	r24, 0x08	; 8
     2cc:	85 b9       	out	0x05, r24	; 5
     2ce:	08 95       	ret
	else
	PORTB&=~(1<<PORTB3);
     2d0:	85 b1       	in	r24, 0x05	; 5
     2d2:	87 7f       	andi	r24, 0xF7	; 247
     2d4:	85 b9       	out	0x05, r24	; 5
     2d6:	08 95       	ret

000002d8 <comandos_LCD>:
	comandos_LCD(0b0001);
}

void comandos_LCD(char a){
	//RS=0;
	PORTD&=~(1<<PORTD2);
     2d8:	9b b1       	in	r25, 0x0b	; 11
     2da:	9b 7f       	andi	r25, 0xFB	; 251
     2dc:	9b b9       	out	0x0b, r25	; 11
	port_disp(a);
     2de:	0e 94 23 01 	call	0x246	; 0x246 <port_disp>
	//enable=1;
	PORTD|=(1<<PORTD3);
     2e2:	8b b1       	in	r24, 0x0b	; 11
     2e4:	88 60       	ori	r24, 0x08	; 8
     2e6:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2e8:	8f e7       	ldi	r24, 0x7F	; 127
     2ea:	9e e3       	ldi	r25, 0x3E	; 62
     2ec:	01 97       	sbiw	r24, 0x01	; 1
     2ee:	f1 f7       	brne	.-4      	; 0x2ec <comandos_LCD+0x14>
     2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <comandos_LCD+0x1a>
     2f2:	00 00       	nop
	_delay_ms(4);
	//E=0;
	PORTD&=~(1<<PORTD3);
     2f4:	8b b1       	in	r24, 0x0b	; 11
     2f6:	87 7f       	andi	r24, 0xF7	; 247
     2f8:	8b b9       	out	0x0b, r24	; 11
     2fa:	08 95       	ret

000002fc <initLCD8b>:
 * Created: 2/27/2025 8:30:29 PM
 *  Author: njfg0
 */ 
#include "lcd.h"
void initLCD8b(void){
	DDRD|=(1<<DDD7)|(1<<DDD6)|(1<<DDD5)|(1<<DDD4)|(1<<DDD3)|(1<<DDD2);
     2fc:	8a b1       	in	r24, 0x0a	; 10
     2fe:	8c 6f       	ori	r24, 0xFC	; 252
     300:	8a b9       	out	0x0a, r24	; 10
	DDRB|=(1<<DDB0)|(1<<DDB1)|(1<<DDB2)|(1<<DDB3);
     302:	84 b1       	in	r24, 0x04	; 4
     304:	8f 60       	ori	r24, 0x0F	; 15
     306:	84 b9       	out	0x04, r24	; 4
	PORTB=0;
     308:	15 b8       	out	0x05, r1	; 5
	PORTD=0;
     30a:	1b b8       	out	0x0b, r1	; 11
	
	port_disp(0x00);
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	0e 94 23 01 	call	0x246	; 0x246 <port_disp>
     312:	2f ef       	ldi	r18, 0xFF	; 255
     314:	89 ef       	ldi	r24, 0xF9	; 249
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	21 50       	subi	r18, 0x01	; 1
     31a:	80 40       	sbci	r24, 0x00	; 0
     31c:	90 40       	sbci	r25, 0x00	; 0
     31e:	e1 f7       	brne	.-8      	; 0x318 <initLCD8b+0x1c>
     320:	00 c0       	rjmp	.+0      	; 0x322 <initLCD8b+0x26>
     322:	00 00       	nop
	_delay_ms(20);
	
	//function set
	comandos_LCD(0b00111000);
     324:	88 e3       	ldi	r24, 0x38	; 56
     326:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <comandos_LCD>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     32a:	8f e8       	ldi	r24, 0x8F	; 143
     32c:	91 e0       	ldi	r25, 0x01	; 1
     32e:	01 97       	sbiw	r24, 0x01	; 1
     330:	f1 f7       	brne	.-4      	; 0x32e <initLCD8b+0x32>
     332:	00 c0       	rjmp	.+0      	; 0x334 <initLCD8b+0x38>
     334:	00 00       	nop
	_delay_us(100);
	
	//display on/off
	comandos_LCD(0b1100);
     336:	8c e0       	ldi	r24, 0x0C	; 12
     338:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <comandos_LCD>
     33c:	8f e8       	ldi	r24, 0x8F	; 143
     33e:	91 e0       	ldi	r25, 0x01	; 1
     340:	01 97       	sbiw	r24, 0x01	; 1
     342:	f1 f7       	brne	.-4      	; 0x340 <initLCD8b+0x44>
     344:	00 c0       	rjmp	.+0      	; 0x346 <initLCD8b+0x4a>
     346:	00 00       	nop
	_delay_us(100);
	
	//Entry mode
	comandos_LCD(0b0110);
     348:	86 e0       	ldi	r24, 0x06	; 6
     34a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <comandos_LCD>
     34e:	8f e8       	ldi	r24, 0x8F	; 143
     350:	91 e0       	ldi	r25, 0x01	; 1
     352:	01 97       	sbiw	r24, 0x01	; 1
     354:	f1 f7       	brne	.-4      	; 0x352 <initLCD8b+0x56>
     356:	00 c0       	rjmp	.+0      	; 0x358 <initLCD8b+0x5c>
     358:	00 00       	nop
	_delay_us(100);
	
	//clear display
	comandos_LCD(0b0001);
     35a:	81 e0       	ldi	r24, 0x01	; 1
     35c:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <comandos_LCD>
     360:	08 95       	ret

00000362 <LCD_write_char>:
}

void LCD_write_char(char d){
	//manda y escribe el mensaje
	//RS=1
	PORTD|=(1<<PORTD2);
     362:	9b b1       	in	r25, 0x0b	; 11
     364:	94 60       	ori	r25, 0x04	; 4
     366:	9b b9       	out	0x0b, r25	; 11
	port_disp(d);
     368:	0e 94 23 01 	call	0x246	; 0x246 <port_disp>
	//E=1
	PORTD|=(1<<PORTD3);
     36c:	8b b1       	in	r24, 0x0b	; 11
     36e:	88 60       	ori	r24, 0x08	; 8
     370:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     372:	8f e7       	ldi	r24, 0x7F	; 127
     374:	9e e3       	ldi	r25, 0x3E	; 62
     376:	01 97       	sbiw	r24, 0x01	; 1
     378:	f1 f7       	brne	.-4      	; 0x376 <LCD_write_char+0x14>
     37a:	00 c0       	rjmp	.+0      	; 0x37c <LCD_write_char+0x1a>
     37c:	00 00       	nop
	_delay_ms(4);
	//E=0
	PORTD&=~(1<<PORTD3);
     37e:	8b b1       	in	r24, 0x0b	; 11
     380:	87 7f       	andi	r24, 0xF7	; 247
     382:	8b b9       	out	0x0b, r24	; 11
     384:	08 95       	ret

00000386 <LCD_write_String>:
	
}

void LCD_write_String(char *a){
     386:	0f 93       	push	r16
     388:	1f 93       	push	r17
     38a:	cf 93       	push	r28
     38c:	df 93       	push	r29
     38e:	8c 01       	movw	r16, r24
	int i;
	for (i=0;a[i]!='\0';i++)
     390:	c0 e0       	ldi	r28, 0x00	; 0
     392:	d0 e0       	ldi	r29, 0x00	; 0
     394:	03 c0       	rjmp	.+6      	; 0x39c <LCD_write_String+0x16>
	LCD_write_char(a[i]);
     396:	0e 94 b1 01 	call	0x362	; 0x362 <LCD_write_char>
	
}

void LCD_write_String(char *a){
	int i;
	for (i=0;a[i]!='\0';i++)
     39a:	21 96       	adiw	r28, 0x01	; 1
     39c:	f8 01       	movw	r30, r16
     39e:	ec 0f       	add	r30, r28
     3a0:	fd 1f       	adc	r31, r29
     3a2:	80 81       	ld	r24, Z
     3a4:	81 11       	cpse	r24, r1
     3a6:	f7 cf       	rjmp	.-18     	; 0x396 <LCD_write_String+0x10>
	LCD_write_char(a[i]);
}
     3a8:	df 91       	pop	r29
     3aa:	cf 91       	pop	r28
     3ac:	1f 91       	pop	r17
     3ae:	0f 91       	pop	r16
     3b0:	08 95       	ret

000003b2 <LCD_Set_Cursor>:


void LCD_Set_Cursor(char c, char f){
	char temp;
	if (f==1){
     3b2:	61 30       	cpi	r22, 0x01	; 1
     3b4:	21 f4       	brne	.+8      	; 0x3be <LCD_Set_Cursor+0xc>
		temp=0x80+c;
		comandos_LCD(temp);
     3b6:	80 58       	subi	r24, 0x80	; 128
     3b8:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <comandos_LCD>
     3bc:	08 95       	ret
		}else if(f==2){
     3be:	62 30       	cpi	r22, 0x02	; 2
     3c0:	19 f4       	brne	.+6      	; 0x3c8 <LCD_Set_Cursor+0x16>
		temp=0xC0+c;
		comandos_LCD(temp);
     3c2:	80 54       	subi	r24, 0x40	; 64
     3c4:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <comandos_LCD>
     3c8:	08 95       	ret

000003ca <LCD_Set_Icon>:
	}
}

void LCD_Set_Icon(uint8_t adress, uint8_t *icon){
     3ca:	0f 93       	push	r16
     3cc:	1f 93       	push	r17
     3ce:	cf 93       	push	r28
     3d0:	df 93       	push	r29
     3d2:	8b 01       	movw	r16, r22
	adress&=0x7;
     3d4:	87 70       	andi	r24, 0x07	; 7
	comandos_LCD(0x40+(adress*8));
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	08 96       	adiw	r24, 0x08	; 8
     3da:	88 0f       	add	r24, r24
     3dc:	88 0f       	add	r24, r24
     3de:	88 0f       	add	r24, r24
     3e0:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <comandos_LCD>
	int i;
	for (i=0;i<8;i++){
     3e4:	c0 e0       	ldi	r28, 0x00	; 0
     3e6:	d0 e0       	ldi	r29, 0x00	; 0
     3e8:	07 c0       	rjmp	.+14     	; 0x3f8 <LCD_Set_Icon+0x2e>
		LCD_write_char(icon[i]);
     3ea:	f8 01       	movw	r30, r16
     3ec:	ec 0f       	add	r30, r28
     3ee:	fd 1f       	adc	r31, r29
     3f0:	80 81       	ld	r24, Z
     3f2:	0e 94 b1 01 	call	0x362	; 0x362 <LCD_write_char>

void LCD_Set_Icon(uint8_t adress, uint8_t *icon){
	adress&=0x7;
	comandos_LCD(0x40+(adress*8));
	int i;
	for (i=0;i<8;i++){
     3f6:	21 96       	adiw	r28, 0x01	; 1
     3f8:	c8 30       	cpi	r28, 0x08	; 8
     3fa:	d1 05       	cpc	r29, r1
     3fc:	b4 f3       	brlt	.-20     	; 0x3ea <LCD_Set_Icon+0x20>
		LCD_write_char(icon[i]);
	}
}
     3fe:	df 91       	pop	r29
     400:	cf 91       	pop	r28
     402:	1f 91       	pop	r17
     404:	0f 91       	pop	r16
     406:	08 95       	ret

00000408 <temp_converter>:
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <avr/interrupt.h>

float temp_converter(uint8_t *data){
     408:	0f 93       	push	r16
     40a:	1f 93       	push	r17
     40c:	fc 01       	movw	r30, r24
	uint32_t rawTemp = (((uint32_t)data[3] & 0x0F) << 16) | ((uint32_t)data[4] << 8) | data[5];
     40e:	63 81       	ldd	r22, Z+3	; 0x03
     410:	6f 70       	andi	r22, 0x0F	; 15
     412:	86 2f       	mov	r24, r22
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	a0 e0       	ldi	r26, 0x00	; 0
     418:	b0 e0       	ldi	r27, 0x00	; 0
     41a:	9c 01       	movw	r18, r24
     41c:	11 27       	eor	r17, r17
     41e:	00 27       	eor	r16, r16
     420:	44 81       	ldd	r20, Z+4	; 0x04
     422:	50 e0       	ldi	r21, 0x00	; 0
     424:	60 e0       	ldi	r22, 0x00	; 0
     426:	70 e0       	ldi	r23, 0x00	; 0
     428:	76 2f       	mov	r23, r22
     42a:	65 2f       	mov	r22, r21
     42c:	54 2f       	mov	r21, r20
     42e:	44 27       	eor	r20, r20
     430:	d9 01       	movw	r26, r18
     432:	c8 01       	movw	r24, r16
     434:	84 2b       	or	r24, r20
     436:	95 2b       	or	r25, r21
     438:	a6 2b       	or	r26, r22
     43a:	b7 2b       	or	r27, r23
     43c:	25 81       	ldd	r18, Z+5	; 0x05
     43e:	bc 01       	movw	r22, r24
     440:	cd 01       	movw	r24, r26
     442:	62 2b       	or	r22, r18
	return (rawTemp * 200.0) / 1048576.0 - 50;
     444:	0e 94 78 04 	call	0x8f0	; 0x8f0 <__floatunsisf>
     448:	20 e0       	ldi	r18, 0x00	; 0
     44a:	30 e0       	ldi	r19, 0x00	; 0
     44c:	48 e4       	ldi	r20, 0x48	; 72
     44e:	53 e4       	ldi	r21, 0x43	; 67
     450:	0e 94 06 05 	call	0xa0c	; 0xa0c <__mulsf3>
     454:	20 e0       	ldi	r18, 0x00	; 0
     456:	30 e0       	ldi	r19, 0x00	; 0
     458:	40 e8       	ldi	r20, 0x80	; 128
     45a:	55 e3       	ldi	r21, 0x35	; 53
     45c:	0e 94 06 05 	call	0xa0c	; 0xa0c <__mulsf3>
     460:	20 e0       	ldi	r18, 0x00	; 0
     462:	30 e0       	ldi	r19, 0x00	; 0
     464:	48 e4       	ldi	r20, 0x48	; 72
     466:	52 e4       	ldi	r21, 0x42	; 66
     468:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__subsf3>
}
     46c:	1f 91       	pop	r17
     46e:	0f 91       	pop	r16
     470:	08 95       	ret

00000472 <main>:

int main(void)
{
     472:	cf 93       	push	r28
     474:	df 93       	push	r29
     476:	cd b7       	in	r28, 0x3d	; 61
     478:	de b7       	in	r29, 0x3e	; 62
     47a:	ea 97       	sbiw	r28, 0x3a	; 58
     47c:	0f b6       	in	r0, 0x3f	; 63
     47e:	f8 94       	cli
     480:	de bf       	out	0x3e, r29	; 62
     482:	0f be       	out	0x3f, r0	; 63
     484:	cd bf       	out	0x3d, r28	; 61
	cli();
     486:	f8 94       	cli
	I2C_Master_Init(100000,1); // Inicializa I2C a 100KHz
     488:	41 e0       	ldi	r20, 0x01	; 1
     48a:	60 ea       	ldi	r22, 0xA0	; 160
     48c:	76 e8       	ldi	r23, 0x86	; 134
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	0e 94 7e 00 	call	0xfc	; 0xfc <I2C_Master_Init>
	initLCD8b();
     496:	0e 94 7e 01 	call	0x2fc	; 0x2fc <initLCD8b>
	initUART9600();
     49a:	0e 94 53 00 	call	0xa6	; 0xa6 <initUART9600>
	sei();
     49e:	78 94       	sei
	
	// Enviar comando de inicialización (si necesario)
	I2C_Master_Start();
     4a0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <I2C_Master_Start>
	temp = I2C_Master_Write((temp_adress << 1) | 0);
     4a4:	80 e7       	ldi	r24, 0x70	; 112
     4a6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <I2C_Master_Write>
     4aa:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <temp>
	I2C_Master_Write(0xE1);
     4ae:	81 ee       	ldi	r24, 0xE1	; 225
     4b0:	0e 94 e6 00 	call	0x1cc	; 0x1cc <I2C_Master_Write>
	I2C_Master_Stop();
     4b4:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <I2C_Master_Stop>
     4b8:	8f e3       	ldi	r24, 0x3F	; 63
     4ba:	9c e9       	ldi	r25, 0x9C	; 156
     4bc:	01 97       	sbiw	r24, 0x01	; 1
     4be:	f1 f7       	brne	.-4      	; 0x4bc <main+0x4a>
     4c0:	00 c0       	rjmp	.+0      	; 0x4c2 <main+0x50>
     4c2:	00 00       	nop
	_delay_ms(10);

	//cargar icono
	LCD_Set_Icon(0,temp_icon);
     4c4:	60 e0       	ldi	r22, 0x00	; 0
     4c6:	71 e0       	ldi	r23, 0x01	; 1
     4c8:	80 e0       	ldi	r24, 0x00	; 0
     4ca:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LCD_Set_Icon>

	LCD_Set_Cursor(0,1);
     4ce:	61 e0       	ldi	r22, 0x01	; 1
     4d0:	80 e0       	ldi	r24, 0x00	; 0
     4d2:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCD_Set_Cursor>
	LCD_write_char(0);
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	0e 94 b1 01 	call	0x362	; 0x362 <LCD_write_char>

	while (1)
	{
		
		// Enviar comando de medición
		I2C_Master_Start();
     4dc:	0e 94 da 00 	call	0x1b4	; 0x1b4 <I2C_Master_Start>
		temp = I2C_Master_Write((temp_adress << 1) | 0);
     4e0:	80 e7       	ldi	r24, 0x70	; 112
     4e2:	0e 94 e6 00 	call	0x1cc	; 0x1cc <I2C_Master_Write>
     4e6:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <temp>
		if (temp != 1) {
     4ea:	81 30       	cpi	r24, 0x01	; 1
     4ec:	19 f0       	breq	.+6      	; 0x4f4 <main+0x82>
			I2C_Master_Stop();
     4ee:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <I2C_Master_Stop>
     4f2:	f4 cf       	rjmp	.-24     	; 0x4dc <main+0x6a>
			continue;
		}

		I2C_Master_Write(0xAC);
     4f4:	8c ea       	ldi	r24, 0xAC	; 172
     4f6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <I2C_Master_Write>
		I2C_Master_Write(0x33);
     4fa:	83 e3       	ldi	r24, 0x33	; 51
     4fc:	0e 94 e6 00 	call	0x1cc	; 0x1cc <I2C_Master_Write>
		I2C_Master_Write(0x00);
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	0e 94 e6 00 	call	0x1cc	; 0x1cc <I2C_Master_Write>
		I2C_Master_Stop();
     506:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <I2C_Master_Stop>

		// Esperar hasta que la medición esté lista
		uint8_t estado = 0;
     50a:	1a ae       	std	Y+58, r1	; 0x3a
		do {
			I2C_Master_Start();
     50c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <I2C_Master_Start>
			temp = I2C_Master_Write((temp_adress << 1) | 1);
     510:	81 e7       	ldi	r24, 0x71	; 113
     512:	0e 94 e6 00 	call	0x1cc	; 0x1cc <I2C_Master_Write>
     516:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <temp>
			I2C_Master_Read(&estado, 1);
     51a:	61 e0       	ldi	r22, 0x01	; 1
     51c:	ce 01       	movw	r24, r28
     51e:	ca 96       	adiw	r24, 0x3a	; 58
     520:	0e 94 fe 00 	call	0x1fc	; 0x1fc <I2C_Master_Read>
			I2C_Master_Stop();
     524:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <I2C_Master_Stop>
		} while (estado & 0x80);
     528:	8a ad       	ldd	r24, Y+58	; 0x3a
     52a:	88 23       	and	r24, r24
     52c:	7c f3       	brlt	.-34     	; 0x50c <main+0x9a>

		// Leer datos
		I2C_Master_Start();
     52e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <I2C_Master_Start>
		temp = I2C_Master_Write((temp_adress << 1) | 1);
     532:	81 e7       	ldi	r24, 0x71	; 113
     534:	0e 94 e6 00 	call	0x1cc	; 0x1cc <I2C_Master_Write>
     538:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <temp>
		for (uint8_t i = 0; i < 6; i++) {
     53c:	10 e0       	ldi	r17, 0x00	; 0
     53e:	0d c0       	rjmp	.+26     	; 0x55a <main+0xe8>
			estado_sT = I2C_Master_Read(&data_Ttemp[i], (i < 5)); // ACK en los primeros 5
     540:	81 2f       	mov	r24, r17
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	61 e0       	ldi	r22, 0x01	; 1
     546:	15 30       	cpi	r17, 0x05	; 5
     548:	08 f0       	brcs	.+2      	; 0x54c <main+0xda>
     54a:	60 e0       	ldi	r22, 0x00	; 0
     54c:	89 5c       	subi	r24, 0xC9	; 201
     54e:	9e 4f       	sbci	r25, 0xFE	; 254
     550:	0e 94 fe 00 	call	0x1fc	; 0x1fc <I2C_Master_Read>
     554:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <estado_sT>
		} while (estado & 0x80);

		// Leer datos
		I2C_Master_Start();
		temp = I2C_Master_Write((temp_adress << 1) | 1);
		for (uint8_t i = 0; i < 6; i++) {
     558:	1f 5f       	subi	r17, 0xFF	; 255
     55a:	16 30       	cpi	r17, 0x06	; 6
     55c:	88 f3       	brcs	.-30     	; 0x540 <main+0xce>
			estado_sT = I2C_Master_Read(&data_Ttemp[i], (i < 5)); // ACK en los primeros 5
		}
		I2C_Master_Stop();
     55e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <I2C_Master_Stop>

		// Convertir temperatura
		temperatura = temp_converter(data_Ttemp);
     562:	87 e3       	ldi	r24, 0x37	; 55
     564:	91 e0       	ldi	r25, 0x01	; 1
     566:	0e 94 04 02 	call	0x408	; 0x408 <temp_converter>
     56a:	60 93 4d 01 	sts	0x014D, r22	; 0x80014d <temperatura>
     56e:	70 93 4e 01 	sts	0x014E, r23	; 0x80014e <temperatura+0x1>
     572:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <temperatura+0x2>
     576:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <temperatura+0x3>
		temp_f = (int)temperatura;
     57a:	0e 94 42 04 	call	0x884	; 0x884 <__fixsfsi>
     57e:	60 93 51 01 	sts	0x0151, r22	; 0x800151 <temp_f>
		
		if (temp_f>25){
     582:	6a 31       	cpi	r22, 0x1A	; 26
     584:	20 f0       	brcs	.+8      	; 0x58e <main+0x11c>
			PORTB |= (1 << PORTB4);//enciende turbina
     586:	85 b1       	in	r24, 0x05	; 5
     588:	80 61       	ori	r24, 0x10	; 16
     58a:	85 b9       	out	0x05, r24	; 5
     58c:	03 c0       	rjmp	.+6      	; 0x594 <main+0x122>
		}else{
			PORTB &= ~(1 << PORTB4);//apaga turbina
     58e:	85 b1       	in	r24, 0x05	; 5
     590:	8f 7e       	andi	r24, 0xEF	; 239
     592:	85 b9       	out	0x05, r24	; 5
		}

		// Mostrar en LCD
		LCD_Set_Cursor(1,1);
     594:	61 e0       	ldi	r22, 0x01	; 1
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCD_Set_Cursor>
		char salida[15];
		sprintf(salida, "%2d'C  ", temp_f);
     59c:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <temp_f>
     5a0:	1f 92       	push	r1
     5a2:	8f 93       	push	r24
     5a4:	88 e0       	ldi	r24, 0x08	; 8
     5a6:	91 e0       	ldi	r25, 0x01	; 1
     5a8:	9f 93       	push	r25
     5aa:	8f 93       	push	r24
     5ac:	8e 01       	movw	r16, r28
     5ae:	0f 5d       	subi	r16, 0xDF	; 223
     5b0:	1f 4f       	sbci	r17, 0xFF	; 255
     5b2:	1f 93       	push	r17
     5b4:	0f 93       	push	r16
     5b6:	0e 94 a4 05 	call	0xb48	; 0xb48 <sprintf>
		LCD_write_String(salida);
     5ba:	c8 01       	movw	r24, r16
     5bc:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_write_String>

				
		//COMIENZA A LEER EL SENSOR ULTRASONICO
		I2C_Master_Start();
     5c0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <I2C_Master_Start>
		temp = I2C_Master_Write((slave1 << 1) | 1);
     5c4:	81 e2       	ldi	r24, 0x21	; 33
     5c6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <I2C_Master_Write>
     5ca:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <temp>
		for(uint8_t i=0;i<2;i++){
     5ce:	0f 90       	pop	r0
     5d0:	0f 90       	pop	r0
     5d2:	0f 90       	pop	r0
     5d4:	0f 90       	pop	r0
     5d6:	0f 90       	pop	r0
     5d8:	0f 90       	pop	r0
     5da:	10 e0       	ldi	r17, 0x00	; 0
     5dc:	0c c0       	rjmp	.+24     	; 0x5f6 <main+0x184>
			estado_us=I2C_Master_Read(&us_sensor_data[i],i<1);
     5de:	81 2f       	mov	r24, r17
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	61 e0       	ldi	r22, 0x01	; 1
     5e4:	11 11       	cpse	r17, r1
     5e6:	60 e0       	ldi	r22, 0x00	; 0
     5e8:	8f 5b       	subi	r24, 0xBF	; 191
     5ea:	9e 4f       	sbci	r25, 0xFE	; 254
     5ec:	0e 94 fe 00 	call	0x1fc	; 0x1fc <I2C_Master_Read>
     5f0:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <estado_us>

				
		//COMIENZA A LEER EL SENSOR ULTRASONICO
		I2C_Master_Start();
		temp = I2C_Master_Write((slave1 << 1) | 1);
		for(uint8_t i=0;i<2;i++){
     5f4:	1f 5f       	subi	r17, 0xFF	; 255
     5f6:	12 30       	cpi	r17, 0x02	; 2
     5f8:	90 f3       	brcs	.-28     	; 0x5de <main+0x16c>
			estado_us=I2C_Master_Read(&us_sensor_data[i],i<1);
		}
		I2C_Master_Stop();
     5fa:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <I2C_Master_Stop>
		
		distancia=(us_sensor_data[0]<<8)|us_sensor_data[1];
     5fe:	e1 e4       	ldi	r30, 0x41	; 65
     600:	f1 e0       	ldi	r31, 0x01	; 1
     602:	80 81       	ld	r24, Z
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	98 2f       	mov	r25, r24
     608:	88 27       	eor	r24, r24
     60a:	21 81       	ldd	r18, Z+1	; 0x01
     60c:	82 2b       	or	r24, r18
     60e:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <distancia+0x1>
     612:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <distancia>
		LCD_Set_Cursor(0,2);
     616:	62 e0       	ldi	r22, 0x02	; 2
     618:	80 e0       	ldi	r24, 0x00	; 0
     61a:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCD_Set_Cursor>
		LCD_write_String("D:");
     61e:	80 e1       	ldi	r24, 0x10	; 16
     620:	91 e0       	ldi	r25, 0x01	; 1
     622:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_write_String>
		LCD_Set_Cursor(1,2);
     626:	62 e0       	ldi	r22, 0x02	; 2
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCD_Set_Cursor>
		char vect_salida[16];
		sprintf(vect_salida, "%dcm ", distancia);
     62e:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <distancia+0x1>
     632:	8f 93       	push	r24
     634:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <distancia>
     638:	8f 93       	push	r24
     63a:	83 e1       	ldi	r24, 0x13	; 19
     63c:	91 e0       	ldi	r25, 0x01	; 1
     63e:	9f 93       	push	r25
     640:	8f 93       	push	r24
     642:	8e 01       	movw	r16, r28
     644:	0f 5e       	subi	r16, 0xEF	; 239
     646:	1f 4f       	sbci	r17, 0xFF	; 255
     648:	1f 93       	push	r17
     64a:	0f 93       	push	r16
     64c:	0e 94 a4 05 	call	0xb48	; 0xb48 <sprintf>
		LCD_write_String(vect_salida);
     650:	c8 01       	movw	r24, r16
     652:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_write_String>
     656:	9f ef       	ldi	r25, 0xFF	; 255
     658:	2a e6       	ldi	r18, 0x6A	; 106
     65a:	83 e0       	ldi	r24, 0x03	; 3
     65c:	91 50       	subi	r25, 0x01	; 1
     65e:	20 40       	sbci	r18, 0x00	; 0
     660:	80 40       	sbci	r24, 0x00	; 0
     662:	e1 f7       	brne	.-8      	; 0x65c <main+0x1ea>
     664:	00 c0       	rjmp	.+0      	; 0x666 <main+0x1f4>
     666:	00 00       	nop
		_delay_ms(70);
		
		//COMIENZA A LEER EL SENSOR DE PULSO
		I2C_Master_Start();
     668:	0e 94 da 00 	call	0x1b4	; 0x1b4 <I2C_Master_Start>
		temp = I2C_Master_Write((slave2 << 1) | 1);
     66c:	81 e4       	ldi	r24, 0x41	; 65
     66e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <I2C_Master_Write>
     672:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <temp>
		if (temp!=1){
     676:	0f 90       	pop	r0
     678:	0f 90       	pop	r0
     67a:	0f 90       	pop	r0
     67c:	0f 90       	pop	r0
     67e:	0f 90       	pop	r0
     680:	0f 90       	pop	r0
     682:	81 30       	cpi	r24, 0x01	; 1
     684:	19 f0       	breq	.+6      	; 0x68c <main+0x21a>
			I2C_Master_Stop();
     686:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <I2C_Master_Stop>
     68a:	0d c0       	rjmp	.+26     	; 0x6a6 <main+0x234>
		}else{
			TWCR=(1<<TWINT)|(1<<TWEN);
     68c:	84 e8       	ldi	r24, 0x84	; 132
     68e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
			while(!(TWCR&(1<<TWINT)));
     692:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     696:	88 23       	and	r24, r24
     698:	e4 f7       	brge	.-8      	; 0x692 <main+0x220>
			s_pulso=TWDR;
     69a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     69e:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <s_pulso>
			I2C_Master_Stop();
     6a2:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <I2C_Master_Stop>
		}
		LCD_Set_Cursor(6,2);
     6a6:	62 e0       	ldi	r22, 0x02	; 2
     6a8:	86 e0       	ldi	r24, 0x06	; 6
     6aa:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCD_Set_Cursor>
		LCD_write_String("P:");
     6ae:	89 e1       	ldi	r24, 0x19	; 25
     6b0:	91 e0       	ldi	r25, 0x01	; 1
     6b2:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_write_String>
		LCD_Set_Cursor(9,2);
     6b6:	62 e0       	ldi	r22, 0x02	; 2
     6b8:	89 e0       	ldi	r24, 0x09	; 9
     6ba:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCD_Set_Cursor>
		char salida_pulso[16];
		sprintf(salida_pulso,"%d bpm  ",s_pulso);
     6be:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <s_pulso>
     6c2:	1f 92       	push	r1
     6c4:	8f 93       	push	r24
     6c6:	8c e1       	ldi	r24, 0x1C	; 28
     6c8:	91 e0       	ldi	r25, 0x01	; 1
     6ca:	9f 93       	push	r25
     6cc:	8f 93       	push	r24
     6ce:	8e 01       	movw	r16, r28
     6d0:	0f 5f       	subi	r16, 0xFF	; 255
     6d2:	1f 4f       	sbci	r17, 0xFF	; 255
     6d4:	1f 93       	push	r17
     6d6:	0f 93       	push	r16
     6d8:	0e 94 a4 05 	call	0xb48	; 0xb48 <sprintf>
		LCD_write_String(salida_pulso);
     6dc:	c8 01       	movw	r24, r16
     6de:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_write_String>
		uint8_t LS_dist=distancia%100;
     6e2:	40 91 33 01 	lds	r20, 0x0133	; 0x800133 <distancia>
     6e6:	50 91 34 01 	lds	r21, 0x0134	; 0x800134 <distancia+0x1>
     6ea:	9a 01       	movw	r18, r20
     6ec:	36 95       	lsr	r19
     6ee:	27 95       	ror	r18
     6f0:	36 95       	lsr	r19
     6f2:	27 95       	ror	r18
     6f4:	ab e7       	ldi	r26, 0x7B	; 123
     6f6:	b4 e1       	ldi	r27, 0x14	; 20
     6f8:	0e 94 95 05 	call	0xb2a	; 0xb2a <__umulhisi3>
     6fc:	96 95       	lsr	r25
     6fe:	87 95       	ror	r24
     700:	64 e6       	ldi	r22, 0x64	; 100
     702:	68 9f       	mul	r22, r24
     704:	90 01       	movw	r18, r0
     706:	69 9f       	mul	r22, r25
     708:	30 0d       	add	r19, r0
     70a:	11 24       	eor	r1, r1
     70c:	ca 01       	movw	r24, r20
     70e:	82 1b       	sub	r24, r18
     710:	93 0b       	sbc	r25, r19
		char mensaje_esp32[10];
		uint8_t temp_c = temp_f;
     712:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <temp_f>
		
		if (delay_uart > 10){
     716:	40 91 2e 01 	lds	r20, 0x012E	; 0x80012e <__data_end>
     71a:	50 91 2f 01 	lds	r21, 0x012F	; 0x80012f <__data_end+0x1>
     71e:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <__data_end+0x2>
     722:	70 91 31 01 	lds	r23, 0x0131	; 0x800131 <__data_end+0x3>
     726:	0f 90       	pop	r0
     728:	0f 90       	pop	r0
     72a:	0f 90       	pop	r0
     72c:	0f 90       	pop	r0
     72e:	0f 90       	pop	r0
     730:	0f 90       	pop	r0
     732:	4b 30       	cpi	r20, 0x0B	; 11
     734:	51 05       	cpc	r21, r1
     736:	61 05       	cpc	r22, r1
     738:	71 05       	cpc	r23, r1
     73a:	1c f1       	brlt	.+70     	; 0x782 <main+0x310>
			delay_uart = 0;
     73c:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <__data_end>
     740:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <__data_end+0x1>
     744:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <__data_end+0x2>
     748:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <__data_end+0x3>
			sprintf(mensaje_esp32,"<%c%c%c>",LS_dist,temp_c,s_pulso);
     74c:	30 91 32 01 	lds	r19, 0x0132	; 0x800132 <s_pulso>
     750:	1f 92       	push	r1
     752:	3f 93       	push	r19
     754:	1f 92       	push	r1
     756:	2f 93       	push	r18
     758:	99 27       	eor	r25, r25
     75a:	9f 93       	push	r25
     75c:	8f 93       	push	r24
     75e:	85 e2       	ldi	r24, 0x25	; 37
     760:	91 e0       	ldi	r25, 0x01	; 1
     762:	9f 93       	push	r25
     764:	8f 93       	push	r24
     766:	01 5d       	subi	r16, 0xD1	; 209
     768:	1f 4f       	sbci	r17, 0xFF	; 255
     76a:	1f 93       	push	r17
     76c:	0f 93       	push	r16
     76e:	0e 94 a4 05 	call	0xb48	; 0xb48 <sprintf>
			writetxtUART(mensaje_esp32);
     772:	c8 01       	movw	r24, r16
     774:	0e 94 6d 00 	call	0xda	; 0xda <writetxtUART>
     778:	0f b6       	in	r0, 0x3f	; 63
     77a:	f8 94       	cli
     77c:	de bf       	out	0x3e, r29	; 62
     77e:	0f be       	out	0x3f, r0	; 63
     780:	cd bf       	out	0x3d, r28	; 61
		}
		delay_uart += 1;
     782:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
     786:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <__data_end+0x1>
     78a:	a0 91 30 01 	lds	r26, 0x0130	; 0x800130 <__data_end+0x2>
     78e:	b0 91 31 01 	lds	r27, 0x0131	; 0x800131 <__data_end+0x3>
     792:	01 96       	adiw	r24, 0x01	; 1
     794:	a1 1d       	adc	r26, r1
     796:	b1 1d       	adc	r27, r1
     798:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
     79c:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <__data_end+0x1>
     7a0:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <__data_end+0x2>
     7a4:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <__data_end+0x3>
     7a8:	99 ce       	rjmp	.-718    	; 0x4dc <main+0x6a>

000007aa <__subsf3>:
     7aa:	50 58       	subi	r21, 0x80	; 128

000007ac <__addsf3>:
     7ac:	bb 27       	eor	r27, r27
     7ae:	aa 27       	eor	r26, r26
     7b0:	0e 94 ed 03 	call	0x7da	; 0x7da <__addsf3x>
     7b4:	0c 94 cc 04 	jmp	0x998	; 0x998 <__fp_round>
     7b8:	0e 94 be 04 	call	0x97c	; 0x97c <__fp_pscA>
     7bc:	38 f0       	brcs	.+14     	; 0x7cc <__addsf3+0x20>
     7be:	0e 94 c5 04 	call	0x98a	; 0x98a <__fp_pscB>
     7c2:	20 f0       	brcs	.+8      	; 0x7cc <__addsf3+0x20>
     7c4:	39 f4       	brne	.+14     	; 0x7d4 <__addsf3+0x28>
     7c6:	9f 3f       	cpi	r25, 0xFF	; 255
     7c8:	19 f4       	brne	.+6      	; 0x7d0 <__addsf3+0x24>
     7ca:	26 f4       	brtc	.+8      	; 0x7d4 <__addsf3+0x28>
     7cc:	0c 94 bb 04 	jmp	0x976	; 0x976 <__fp_nan>
     7d0:	0e f4       	brtc	.+2      	; 0x7d4 <__addsf3+0x28>
     7d2:	e0 95       	com	r30
     7d4:	e7 fb       	bst	r30, 7
     7d6:	0c 94 b5 04 	jmp	0x96a	; 0x96a <__fp_inf>

000007da <__addsf3x>:
     7da:	e9 2f       	mov	r30, r25
     7dc:	0e 94 dd 04 	call	0x9ba	; 0x9ba <__fp_split3>
     7e0:	58 f3       	brcs	.-42     	; 0x7b8 <__addsf3+0xc>
     7e2:	ba 17       	cp	r27, r26
     7e4:	62 07       	cpc	r22, r18
     7e6:	73 07       	cpc	r23, r19
     7e8:	84 07       	cpc	r24, r20
     7ea:	95 07       	cpc	r25, r21
     7ec:	20 f0       	brcs	.+8      	; 0x7f6 <__addsf3x+0x1c>
     7ee:	79 f4       	brne	.+30     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     7f0:	a6 f5       	brtc	.+104    	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
     7f2:	0c 94 ff 04 	jmp	0x9fe	; 0x9fe <__fp_zero>
     7f6:	0e f4       	brtc	.+2      	; 0x7fa <__addsf3x+0x20>
     7f8:	e0 95       	com	r30
     7fa:	0b 2e       	mov	r0, r27
     7fc:	ba 2f       	mov	r27, r26
     7fe:	a0 2d       	mov	r26, r0
     800:	0b 01       	movw	r0, r22
     802:	b9 01       	movw	r22, r18
     804:	90 01       	movw	r18, r0
     806:	0c 01       	movw	r0, r24
     808:	ca 01       	movw	r24, r20
     80a:	a0 01       	movw	r20, r0
     80c:	11 24       	eor	r1, r1
     80e:	ff 27       	eor	r31, r31
     810:	59 1b       	sub	r21, r25
     812:	99 f0       	breq	.+38     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
     814:	59 3f       	cpi	r21, 0xF9	; 249
     816:	50 f4       	brcc	.+20     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
     818:	50 3e       	cpi	r21, 0xE0	; 224
     81a:	68 f1       	brcs	.+90     	; 0x876 <__DATA_REGION_LENGTH__+0x76>
     81c:	1a 16       	cp	r1, r26
     81e:	f0 40       	sbci	r31, 0x00	; 0
     820:	a2 2f       	mov	r26, r18
     822:	23 2f       	mov	r18, r19
     824:	34 2f       	mov	r19, r20
     826:	44 27       	eor	r20, r20
     828:	58 5f       	subi	r21, 0xF8	; 248
     82a:	f3 cf       	rjmp	.-26     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     82c:	46 95       	lsr	r20
     82e:	37 95       	ror	r19
     830:	27 95       	ror	r18
     832:	a7 95       	ror	r26
     834:	f0 40       	sbci	r31, 0x00	; 0
     836:	53 95       	inc	r21
     838:	c9 f7       	brne	.-14     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
     83a:	7e f4       	brtc	.+30     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
     83c:	1f 16       	cp	r1, r31
     83e:	ba 0b       	sbc	r27, r26
     840:	62 0b       	sbc	r22, r18
     842:	73 0b       	sbc	r23, r19
     844:	84 0b       	sbc	r24, r20
     846:	ba f0       	brmi	.+46     	; 0x876 <__DATA_REGION_LENGTH__+0x76>
     848:	91 50       	subi	r25, 0x01	; 1
     84a:	a1 f0       	breq	.+40     	; 0x874 <__DATA_REGION_LENGTH__+0x74>
     84c:	ff 0f       	add	r31, r31
     84e:	bb 1f       	adc	r27, r27
     850:	66 1f       	adc	r22, r22
     852:	77 1f       	adc	r23, r23
     854:	88 1f       	adc	r24, r24
     856:	c2 f7       	brpl	.-16     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
     858:	0e c0       	rjmp	.+28     	; 0x876 <__DATA_REGION_LENGTH__+0x76>
     85a:	ba 0f       	add	r27, r26
     85c:	62 1f       	adc	r22, r18
     85e:	73 1f       	adc	r23, r19
     860:	84 1f       	adc	r24, r20
     862:	48 f4       	brcc	.+18     	; 0x876 <__DATA_REGION_LENGTH__+0x76>
     864:	87 95       	ror	r24
     866:	77 95       	ror	r23
     868:	67 95       	ror	r22
     86a:	b7 95       	ror	r27
     86c:	f7 95       	ror	r31
     86e:	9e 3f       	cpi	r25, 0xFE	; 254
     870:	08 f0       	brcs	.+2      	; 0x874 <__DATA_REGION_LENGTH__+0x74>
     872:	b0 cf       	rjmp	.-160    	; 0x7d4 <__addsf3+0x28>
     874:	93 95       	inc	r25
     876:	88 0f       	add	r24, r24
     878:	08 f0       	brcs	.+2      	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
     87a:	99 27       	eor	r25, r25
     87c:	ee 0f       	add	r30, r30
     87e:	97 95       	ror	r25
     880:	87 95       	ror	r24
     882:	08 95       	ret

00000884 <__fixsfsi>:
     884:	0e 94 49 04 	call	0x892	; 0x892 <__fixunssfsi>
     888:	68 94       	set
     88a:	b1 11       	cpse	r27, r1
     88c:	0c 94 00 05 	jmp	0xa00	; 0xa00 <__fp_szero>
     890:	08 95       	ret

00000892 <__fixunssfsi>:
     892:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__fp_splitA>
     896:	88 f0       	brcs	.+34     	; 0x8ba <__fixunssfsi+0x28>
     898:	9f 57       	subi	r25, 0x7F	; 127
     89a:	98 f0       	brcs	.+38     	; 0x8c2 <__fixunssfsi+0x30>
     89c:	b9 2f       	mov	r27, r25
     89e:	99 27       	eor	r25, r25
     8a0:	b7 51       	subi	r27, 0x17	; 23
     8a2:	b0 f0       	brcs	.+44     	; 0x8d0 <__fixunssfsi+0x3e>
     8a4:	e1 f0       	breq	.+56     	; 0x8de <__fixunssfsi+0x4c>
     8a6:	66 0f       	add	r22, r22
     8a8:	77 1f       	adc	r23, r23
     8aa:	88 1f       	adc	r24, r24
     8ac:	99 1f       	adc	r25, r25
     8ae:	1a f0       	brmi	.+6      	; 0x8b6 <__fixunssfsi+0x24>
     8b0:	ba 95       	dec	r27
     8b2:	c9 f7       	brne	.-14     	; 0x8a6 <__fixunssfsi+0x14>
     8b4:	14 c0       	rjmp	.+40     	; 0x8de <__fixunssfsi+0x4c>
     8b6:	b1 30       	cpi	r27, 0x01	; 1
     8b8:	91 f0       	breq	.+36     	; 0x8de <__fixunssfsi+0x4c>
     8ba:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__fp_zero>
     8be:	b1 e0       	ldi	r27, 0x01	; 1
     8c0:	08 95       	ret
     8c2:	0c 94 ff 04 	jmp	0x9fe	; 0x9fe <__fp_zero>
     8c6:	67 2f       	mov	r22, r23
     8c8:	78 2f       	mov	r23, r24
     8ca:	88 27       	eor	r24, r24
     8cc:	b8 5f       	subi	r27, 0xF8	; 248
     8ce:	39 f0       	breq	.+14     	; 0x8de <__fixunssfsi+0x4c>
     8d0:	b9 3f       	cpi	r27, 0xF9	; 249
     8d2:	cc f3       	brlt	.-14     	; 0x8c6 <__fixunssfsi+0x34>
     8d4:	86 95       	lsr	r24
     8d6:	77 95       	ror	r23
     8d8:	67 95       	ror	r22
     8da:	b3 95       	inc	r27
     8dc:	d9 f7       	brne	.-10     	; 0x8d4 <__fixunssfsi+0x42>
     8de:	3e f4       	brtc	.+14     	; 0x8ee <__fixunssfsi+0x5c>
     8e0:	90 95       	com	r25
     8e2:	80 95       	com	r24
     8e4:	70 95       	com	r23
     8e6:	61 95       	neg	r22
     8e8:	7f 4f       	sbci	r23, 0xFF	; 255
     8ea:	8f 4f       	sbci	r24, 0xFF	; 255
     8ec:	9f 4f       	sbci	r25, 0xFF	; 255
     8ee:	08 95       	ret

000008f0 <__floatunsisf>:
     8f0:	e8 94       	clt
     8f2:	09 c0       	rjmp	.+18     	; 0x906 <__stack+0x7>

000008f4 <__floatsisf>:
     8f4:	97 fb       	bst	r25, 7
     8f6:	3e f4       	brtc	.+14     	; 0x906 <__stack+0x7>
     8f8:	90 95       	com	r25
     8fa:	80 95       	com	r24
     8fc:	70 95       	com	r23
     8fe:	61 95       	neg	r22
     900:	7f 4f       	sbci	r23, 0xFF	; 255
     902:	8f 4f       	sbci	r24, 0xFF	; 255
     904:	9f 4f       	sbci	r25, 0xFF	; 255
     906:	99 23       	and	r25, r25
     908:	a9 f0       	breq	.+42     	; 0x934 <__stack+0x35>
     90a:	f9 2f       	mov	r31, r25
     90c:	96 e9       	ldi	r25, 0x96	; 150
     90e:	bb 27       	eor	r27, r27
     910:	93 95       	inc	r25
     912:	f6 95       	lsr	r31
     914:	87 95       	ror	r24
     916:	77 95       	ror	r23
     918:	67 95       	ror	r22
     91a:	b7 95       	ror	r27
     91c:	f1 11       	cpse	r31, r1
     91e:	f8 cf       	rjmp	.-16     	; 0x910 <__stack+0x11>
     920:	fa f4       	brpl	.+62     	; 0x960 <__stack+0x61>
     922:	bb 0f       	add	r27, r27
     924:	11 f4       	brne	.+4      	; 0x92a <__stack+0x2b>
     926:	60 ff       	sbrs	r22, 0
     928:	1b c0       	rjmp	.+54     	; 0x960 <__stack+0x61>
     92a:	6f 5f       	subi	r22, 0xFF	; 255
     92c:	7f 4f       	sbci	r23, 0xFF	; 255
     92e:	8f 4f       	sbci	r24, 0xFF	; 255
     930:	9f 4f       	sbci	r25, 0xFF	; 255
     932:	16 c0       	rjmp	.+44     	; 0x960 <__stack+0x61>
     934:	88 23       	and	r24, r24
     936:	11 f0       	breq	.+4      	; 0x93c <__stack+0x3d>
     938:	96 e9       	ldi	r25, 0x96	; 150
     93a:	11 c0       	rjmp	.+34     	; 0x95e <__stack+0x5f>
     93c:	77 23       	and	r23, r23
     93e:	21 f0       	breq	.+8      	; 0x948 <__stack+0x49>
     940:	9e e8       	ldi	r25, 0x8E	; 142
     942:	87 2f       	mov	r24, r23
     944:	76 2f       	mov	r23, r22
     946:	05 c0       	rjmp	.+10     	; 0x952 <__stack+0x53>
     948:	66 23       	and	r22, r22
     94a:	71 f0       	breq	.+28     	; 0x968 <__stack+0x69>
     94c:	96 e8       	ldi	r25, 0x86	; 134
     94e:	86 2f       	mov	r24, r22
     950:	70 e0       	ldi	r23, 0x00	; 0
     952:	60 e0       	ldi	r22, 0x00	; 0
     954:	2a f0       	brmi	.+10     	; 0x960 <__stack+0x61>
     956:	9a 95       	dec	r25
     958:	66 0f       	add	r22, r22
     95a:	77 1f       	adc	r23, r23
     95c:	88 1f       	adc	r24, r24
     95e:	da f7       	brpl	.-10     	; 0x956 <__stack+0x57>
     960:	88 0f       	add	r24, r24
     962:	96 95       	lsr	r25
     964:	87 95       	ror	r24
     966:	97 f9       	bld	r25, 7
     968:	08 95       	ret

0000096a <__fp_inf>:
     96a:	97 f9       	bld	r25, 7
     96c:	9f 67       	ori	r25, 0x7F	; 127
     96e:	80 e8       	ldi	r24, 0x80	; 128
     970:	70 e0       	ldi	r23, 0x00	; 0
     972:	60 e0       	ldi	r22, 0x00	; 0
     974:	08 95       	ret

00000976 <__fp_nan>:
     976:	9f ef       	ldi	r25, 0xFF	; 255
     978:	80 ec       	ldi	r24, 0xC0	; 192
     97a:	08 95       	ret

0000097c <__fp_pscA>:
     97c:	00 24       	eor	r0, r0
     97e:	0a 94       	dec	r0
     980:	16 16       	cp	r1, r22
     982:	17 06       	cpc	r1, r23
     984:	18 06       	cpc	r1, r24
     986:	09 06       	cpc	r0, r25
     988:	08 95       	ret

0000098a <__fp_pscB>:
     98a:	00 24       	eor	r0, r0
     98c:	0a 94       	dec	r0
     98e:	12 16       	cp	r1, r18
     990:	13 06       	cpc	r1, r19
     992:	14 06       	cpc	r1, r20
     994:	05 06       	cpc	r0, r21
     996:	08 95       	ret

00000998 <__fp_round>:
     998:	09 2e       	mov	r0, r25
     99a:	03 94       	inc	r0
     99c:	00 0c       	add	r0, r0
     99e:	11 f4       	brne	.+4      	; 0x9a4 <__fp_round+0xc>
     9a0:	88 23       	and	r24, r24
     9a2:	52 f0       	brmi	.+20     	; 0x9b8 <__fp_round+0x20>
     9a4:	bb 0f       	add	r27, r27
     9a6:	40 f4       	brcc	.+16     	; 0x9b8 <__fp_round+0x20>
     9a8:	bf 2b       	or	r27, r31
     9aa:	11 f4       	brne	.+4      	; 0x9b0 <__fp_round+0x18>
     9ac:	60 ff       	sbrs	r22, 0
     9ae:	04 c0       	rjmp	.+8      	; 0x9b8 <__fp_round+0x20>
     9b0:	6f 5f       	subi	r22, 0xFF	; 255
     9b2:	7f 4f       	sbci	r23, 0xFF	; 255
     9b4:	8f 4f       	sbci	r24, 0xFF	; 255
     9b6:	9f 4f       	sbci	r25, 0xFF	; 255
     9b8:	08 95       	ret

000009ba <__fp_split3>:
     9ba:	57 fd       	sbrc	r21, 7
     9bc:	90 58       	subi	r25, 0x80	; 128
     9be:	44 0f       	add	r20, r20
     9c0:	55 1f       	adc	r21, r21
     9c2:	59 f0       	breq	.+22     	; 0x9da <__fp_splitA+0x10>
     9c4:	5f 3f       	cpi	r21, 0xFF	; 255
     9c6:	71 f0       	breq	.+28     	; 0x9e4 <__fp_splitA+0x1a>
     9c8:	47 95       	ror	r20

000009ca <__fp_splitA>:
     9ca:	88 0f       	add	r24, r24
     9cc:	97 fb       	bst	r25, 7
     9ce:	99 1f       	adc	r25, r25
     9d0:	61 f0       	breq	.+24     	; 0x9ea <__fp_splitA+0x20>
     9d2:	9f 3f       	cpi	r25, 0xFF	; 255
     9d4:	79 f0       	breq	.+30     	; 0x9f4 <__fp_splitA+0x2a>
     9d6:	87 95       	ror	r24
     9d8:	08 95       	ret
     9da:	12 16       	cp	r1, r18
     9dc:	13 06       	cpc	r1, r19
     9de:	14 06       	cpc	r1, r20
     9e0:	55 1f       	adc	r21, r21
     9e2:	f2 cf       	rjmp	.-28     	; 0x9c8 <__fp_split3+0xe>
     9e4:	46 95       	lsr	r20
     9e6:	f1 df       	rcall	.-30     	; 0x9ca <__fp_splitA>
     9e8:	08 c0       	rjmp	.+16     	; 0x9fa <__fp_splitA+0x30>
     9ea:	16 16       	cp	r1, r22
     9ec:	17 06       	cpc	r1, r23
     9ee:	18 06       	cpc	r1, r24
     9f0:	99 1f       	adc	r25, r25
     9f2:	f1 cf       	rjmp	.-30     	; 0x9d6 <__fp_splitA+0xc>
     9f4:	86 95       	lsr	r24
     9f6:	71 05       	cpc	r23, r1
     9f8:	61 05       	cpc	r22, r1
     9fa:	08 94       	sec
     9fc:	08 95       	ret

000009fe <__fp_zero>:
     9fe:	e8 94       	clt

00000a00 <__fp_szero>:
     a00:	bb 27       	eor	r27, r27
     a02:	66 27       	eor	r22, r22
     a04:	77 27       	eor	r23, r23
     a06:	cb 01       	movw	r24, r22
     a08:	97 f9       	bld	r25, 7
     a0a:	08 95       	ret

00000a0c <__mulsf3>:
     a0c:	0e 94 19 05 	call	0xa32	; 0xa32 <__mulsf3x>
     a10:	0c 94 cc 04 	jmp	0x998	; 0x998 <__fp_round>
     a14:	0e 94 be 04 	call	0x97c	; 0x97c <__fp_pscA>
     a18:	38 f0       	brcs	.+14     	; 0xa28 <__mulsf3+0x1c>
     a1a:	0e 94 c5 04 	call	0x98a	; 0x98a <__fp_pscB>
     a1e:	20 f0       	brcs	.+8      	; 0xa28 <__mulsf3+0x1c>
     a20:	95 23       	and	r25, r21
     a22:	11 f0       	breq	.+4      	; 0xa28 <__mulsf3+0x1c>
     a24:	0c 94 b5 04 	jmp	0x96a	; 0x96a <__fp_inf>
     a28:	0c 94 bb 04 	jmp	0x976	; 0x976 <__fp_nan>
     a2c:	11 24       	eor	r1, r1
     a2e:	0c 94 00 05 	jmp	0xa00	; 0xa00 <__fp_szero>

00000a32 <__mulsf3x>:
     a32:	0e 94 dd 04 	call	0x9ba	; 0x9ba <__fp_split3>
     a36:	70 f3       	brcs	.-36     	; 0xa14 <__mulsf3+0x8>

00000a38 <__mulsf3_pse>:
     a38:	95 9f       	mul	r25, r21
     a3a:	c1 f3       	breq	.-16     	; 0xa2c <__mulsf3+0x20>
     a3c:	95 0f       	add	r25, r21
     a3e:	50 e0       	ldi	r21, 0x00	; 0
     a40:	55 1f       	adc	r21, r21
     a42:	62 9f       	mul	r22, r18
     a44:	f0 01       	movw	r30, r0
     a46:	72 9f       	mul	r23, r18
     a48:	bb 27       	eor	r27, r27
     a4a:	f0 0d       	add	r31, r0
     a4c:	b1 1d       	adc	r27, r1
     a4e:	63 9f       	mul	r22, r19
     a50:	aa 27       	eor	r26, r26
     a52:	f0 0d       	add	r31, r0
     a54:	b1 1d       	adc	r27, r1
     a56:	aa 1f       	adc	r26, r26
     a58:	64 9f       	mul	r22, r20
     a5a:	66 27       	eor	r22, r22
     a5c:	b0 0d       	add	r27, r0
     a5e:	a1 1d       	adc	r26, r1
     a60:	66 1f       	adc	r22, r22
     a62:	82 9f       	mul	r24, r18
     a64:	22 27       	eor	r18, r18
     a66:	b0 0d       	add	r27, r0
     a68:	a1 1d       	adc	r26, r1
     a6a:	62 1f       	adc	r22, r18
     a6c:	73 9f       	mul	r23, r19
     a6e:	b0 0d       	add	r27, r0
     a70:	a1 1d       	adc	r26, r1
     a72:	62 1f       	adc	r22, r18
     a74:	83 9f       	mul	r24, r19
     a76:	a0 0d       	add	r26, r0
     a78:	61 1d       	adc	r22, r1
     a7a:	22 1f       	adc	r18, r18
     a7c:	74 9f       	mul	r23, r20
     a7e:	33 27       	eor	r19, r19
     a80:	a0 0d       	add	r26, r0
     a82:	61 1d       	adc	r22, r1
     a84:	23 1f       	adc	r18, r19
     a86:	84 9f       	mul	r24, r20
     a88:	60 0d       	add	r22, r0
     a8a:	21 1d       	adc	r18, r1
     a8c:	82 2f       	mov	r24, r18
     a8e:	76 2f       	mov	r23, r22
     a90:	6a 2f       	mov	r22, r26
     a92:	11 24       	eor	r1, r1
     a94:	9f 57       	subi	r25, 0x7F	; 127
     a96:	50 40       	sbci	r21, 0x00	; 0
     a98:	9a f0       	brmi	.+38     	; 0xac0 <__mulsf3_pse+0x88>
     a9a:	f1 f0       	breq	.+60     	; 0xad8 <__mulsf3_pse+0xa0>
     a9c:	88 23       	and	r24, r24
     a9e:	4a f0       	brmi	.+18     	; 0xab2 <__mulsf3_pse+0x7a>
     aa0:	ee 0f       	add	r30, r30
     aa2:	ff 1f       	adc	r31, r31
     aa4:	bb 1f       	adc	r27, r27
     aa6:	66 1f       	adc	r22, r22
     aa8:	77 1f       	adc	r23, r23
     aaa:	88 1f       	adc	r24, r24
     aac:	91 50       	subi	r25, 0x01	; 1
     aae:	50 40       	sbci	r21, 0x00	; 0
     ab0:	a9 f7       	brne	.-22     	; 0xa9c <__mulsf3_pse+0x64>
     ab2:	9e 3f       	cpi	r25, 0xFE	; 254
     ab4:	51 05       	cpc	r21, r1
     ab6:	80 f0       	brcs	.+32     	; 0xad8 <__mulsf3_pse+0xa0>
     ab8:	0c 94 b5 04 	jmp	0x96a	; 0x96a <__fp_inf>
     abc:	0c 94 00 05 	jmp	0xa00	; 0xa00 <__fp_szero>
     ac0:	5f 3f       	cpi	r21, 0xFF	; 255
     ac2:	e4 f3       	brlt	.-8      	; 0xabc <__mulsf3_pse+0x84>
     ac4:	98 3e       	cpi	r25, 0xE8	; 232
     ac6:	d4 f3       	brlt	.-12     	; 0xabc <__mulsf3_pse+0x84>
     ac8:	86 95       	lsr	r24
     aca:	77 95       	ror	r23
     acc:	67 95       	ror	r22
     ace:	b7 95       	ror	r27
     ad0:	f7 95       	ror	r31
     ad2:	e7 95       	ror	r30
     ad4:	9f 5f       	subi	r25, 0xFF	; 255
     ad6:	c1 f7       	brne	.-16     	; 0xac8 <__mulsf3_pse+0x90>
     ad8:	fe 2b       	or	r31, r30
     ada:	88 0f       	add	r24, r24
     adc:	91 1d       	adc	r25, r1
     ade:	96 95       	lsr	r25
     ae0:	87 95       	ror	r24
     ae2:	97 f9       	bld	r25, 7
     ae4:	08 95       	ret

00000ae6 <__udivmodsi4>:
     ae6:	a1 e2       	ldi	r26, 0x21	; 33
     ae8:	1a 2e       	mov	r1, r26
     aea:	aa 1b       	sub	r26, r26
     aec:	bb 1b       	sub	r27, r27
     aee:	fd 01       	movw	r30, r26
     af0:	0d c0       	rjmp	.+26     	; 0xb0c <__udivmodsi4_ep>

00000af2 <__udivmodsi4_loop>:
     af2:	aa 1f       	adc	r26, r26
     af4:	bb 1f       	adc	r27, r27
     af6:	ee 1f       	adc	r30, r30
     af8:	ff 1f       	adc	r31, r31
     afa:	a2 17       	cp	r26, r18
     afc:	b3 07       	cpc	r27, r19
     afe:	e4 07       	cpc	r30, r20
     b00:	f5 07       	cpc	r31, r21
     b02:	20 f0       	brcs	.+8      	; 0xb0c <__udivmodsi4_ep>
     b04:	a2 1b       	sub	r26, r18
     b06:	b3 0b       	sbc	r27, r19
     b08:	e4 0b       	sbc	r30, r20
     b0a:	f5 0b       	sbc	r31, r21

00000b0c <__udivmodsi4_ep>:
     b0c:	66 1f       	adc	r22, r22
     b0e:	77 1f       	adc	r23, r23
     b10:	88 1f       	adc	r24, r24
     b12:	99 1f       	adc	r25, r25
     b14:	1a 94       	dec	r1
     b16:	69 f7       	brne	.-38     	; 0xaf2 <__udivmodsi4_loop>
     b18:	60 95       	com	r22
     b1a:	70 95       	com	r23
     b1c:	80 95       	com	r24
     b1e:	90 95       	com	r25
     b20:	9b 01       	movw	r18, r22
     b22:	ac 01       	movw	r20, r24
     b24:	bd 01       	movw	r22, r26
     b26:	cf 01       	movw	r24, r30
     b28:	08 95       	ret

00000b2a <__umulhisi3>:
     b2a:	a2 9f       	mul	r26, r18
     b2c:	b0 01       	movw	r22, r0
     b2e:	b3 9f       	mul	r27, r19
     b30:	c0 01       	movw	r24, r0
     b32:	a3 9f       	mul	r26, r19
     b34:	70 0d       	add	r23, r0
     b36:	81 1d       	adc	r24, r1
     b38:	11 24       	eor	r1, r1
     b3a:	91 1d       	adc	r25, r1
     b3c:	b2 9f       	mul	r27, r18
     b3e:	70 0d       	add	r23, r0
     b40:	81 1d       	adc	r24, r1
     b42:	11 24       	eor	r1, r1
     b44:	91 1d       	adc	r25, r1
     b46:	08 95       	ret

00000b48 <sprintf>:
     b48:	ae e0       	ldi	r26, 0x0E	; 14
     b4a:	b0 e0       	ldi	r27, 0x00	; 0
     b4c:	ea ea       	ldi	r30, 0xAA	; 170
     b4e:	f5 e0       	ldi	r31, 0x05	; 5
     b50:	0c 94 65 08 	jmp	0x10ca	; 0x10ca <__prologue_saves__+0x1c>
     b54:	0d 89       	ldd	r16, Y+21	; 0x15
     b56:	1e 89       	ldd	r17, Y+22	; 0x16
     b58:	86 e0       	ldi	r24, 0x06	; 6
     b5a:	8c 83       	std	Y+4, r24	; 0x04
     b5c:	1a 83       	std	Y+2, r17	; 0x02
     b5e:	09 83       	std	Y+1, r16	; 0x01
     b60:	8f ef       	ldi	r24, 0xFF	; 255
     b62:	9f e7       	ldi	r25, 0x7F	; 127
     b64:	9e 83       	std	Y+6, r25	; 0x06
     b66:	8d 83       	std	Y+5, r24	; 0x05
     b68:	ae 01       	movw	r20, r28
     b6a:	47 5e       	subi	r20, 0xE7	; 231
     b6c:	5f 4f       	sbci	r21, 0xFF	; 255
     b6e:	6f 89       	ldd	r22, Y+23	; 0x17
     b70:	78 8d       	ldd	r23, Y+24	; 0x18
     b72:	ce 01       	movw	r24, r28
     b74:	01 96       	adiw	r24, 0x01	; 1
     b76:	0e 94 c6 05 	call	0xb8c	; 0xb8c <vfprintf>
     b7a:	ef 81       	ldd	r30, Y+7	; 0x07
     b7c:	f8 85       	ldd	r31, Y+8	; 0x08
     b7e:	e0 0f       	add	r30, r16
     b80:	f1 1f       	adc	r31, r17
     b82:	10 82       	st	Z, r1
     b84:	2e 96       	adiw	r28, 0x0e	; 14
     b86:	e4 e0       	ldi	r30, 0x04	; 4
     b88:	0c 94 81 08 	jmp	0x1102	; 0x1102 <__epilogue_restores__+0x1c>

00000b8c <vfprintf>:
     b8c:	ab e0       	ldi	r26, 0x0B	; 11
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	ec ec       	ldi	r30, 0xCC	; 204
     b92:	f5 e0       	ldi	r31, 0x05	; 5
     b94:	0c 94 57 08 	jmp	0x10ae	; 0x10ae <__prologue_saves__>
     b98:	6c 01       	movw	r12, r24
     b9a:	7b 01       	movw	r14, r22
     b9c:	8a 01       	movw	r16, r20
     b9e:	fc 01       	movw	r30, r24
     ba0:	17 82       	std	Z+7, r1	; 0x07
     ba2:	16 82       	std	Z+6, r1	; 0x06
     ba4:	83 81       	ldd	r24, Z+3	; 0x03
     ba6:	81 ff       	sbrs	r24, 1
     ba8:	cc c1       	rjmp	.+920    	; 0xf42 <vfprintf+0x3b6>
     baa:	ce 01       	movw	r24, r28
     bac:	01 96       	adiw	r24, 0x01	; 1
     bae:	3c 01       	movw	r6, r24
     bb0:	f6 01       	movw	r30, r12
     bb2:	93 81       	ldd	r25, Z+3	; 0x03
     bb4:	f7 01       	movw	r30, r14
     bb6:	93 fd       	sbrc	r25, 3
     bb8:	85 91       	lpm	r24, Z+
     bba:	93 ff       	sbrs	r25, 3
     bbc:	81 91       	ld	r24, Z+
     bbe:	7f 01       	movw	r14, r30
     bc0:	88 23       	and	r24, r24
     bc2:	09 f4       	brne	.+2      	; 0xbc6 <vfprintf+0x3a>
     bc4:	ba c1       	rjmp	.+884    	; 0xf3a <vfprintf+0x3ae>
     bc6:	85 32       	cpi	r24, 0x25	; 37
     bc8:	39 f4       	brne	.+14     	; 0xbd8 <vfprintf+0x4c>
     bca:	93 fd       	sbrc	r25, 3
     bcc:	85 91       	lpm	r24, Z+
     bce:	93 ff       	sbrs	r25, 3
     bd0:	81 91       	ld	r24, Z+
     bd2:	7f 01       	movw	r14, r30
     bd4:	85 32       	cpi	r24, 0x25	; 37
     bd6:	29 f4       	brne	.+10     	; 0xbe2 <vfprintf+0x56>
     bd8:	b6 01       	movw	r22, r12
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	0e 94 bd 07 	call	0xf7a	; 0xf7a <fputc>
     be0:	e7 cf       	rjmp	.-50     	; 0xbb0 <vfprintf+0x24>
     be2:	91 2c       	mov	r9, r1
     be4:	21 2c       	mov	r2, r1
     be6:	31 2c       	mov	r3, r1
     be8:	ff e1       	ldi	r31, 0x1F	; 31
     bea:	f3 15       	cp	r31, r3
     bec:	d8 f0       	brcs	.+54     	; 0xc24 <vfprintf+0x98>
     bee:	8b 32       	cpi	r24, 0x2B	; 43
     bf0:	79 f0       	breq	.+30     	; 0xc10 <vfprintf+0x84>
     bf2:	38 f4       	brcc	.+14     	; 0xc02 <vfprintf+0x76>
     bf4:	80 32       	cpi	r24, 0x20	; 32
     bf6:	79 f0       	breq	.+30     	; 0xc16 <vfprintf+0x8a>
     bf8:	83 32       	cpi	r24, 0x23	; 35
     bfa:	a1 f4       	brne	.+40     	; 0xc24 <vfprintf+0x98>
     bfc:	23 2d       	mov	r18, r3
     bfe:	20 61       	ori	r18, 0x10	; 16
     c00:	1d c0       	rjmp	.+58     	; 0xc3c <vfprintf+0xb0>
     c02:	8d 32       	cpi	r24, 0x2D	; 45
     c04:	61 f0       	breq	.+24     	; 0xc1e <vfprintf+0x92>
     c06:	80 33       	cpi	r24, 0x30	; 48
     c08:	69 f4       	brne	.+26     	; 0xc24 <vfprintf+0x98>
     c0a:	23 2d       	mov	r18, r3
     c0c:	21 60       	ori	r18, 0x01	; 1
     c0e:	16 c0       	rjmp	.+44     	; 0xc3c <vfprintf+0xb0>
     c10:	83 2d       	mov	r24, r3
     c12:	82 60       	ori	r24, 0x02	; 2
     c14:	38 2e       	mov	r3, r24
     c16:	e3 2d       	mov	r30, r3
     c18:	e4 60       	ori	r30, 0x04	; 4
     c1a:	3e 2e       	mov	r3, r30
     c1c:	2a c0       	rjmp	.+84     	; 0xc72 <vfprintf+0xe6>
     c1e:	f3 2d       	mov	r31, r3
     c20:	f8 60       	ori	r31, 0x08	; 8
     c22:	1d c0       	rjmp	.+58     	; 0xc5e <vfprintf+0xd2>
     c24:	37 fc       	sbrc	r3, 7
     c26:	2d c0       	rjmp	.+90     	; 0xc82 <vfprintf+0xf6>
     c28:	20 ed       	ldi	r18, 0xD0	; 208
     c2a:	28 0f       	add	r18, r24
     c2c:	2a 30       	cpi	r18, 0x0A	; 10
     c2e:	40 f0       	brcs	.+16     	; 0xc40 <vfprintf+0xb4>
     c30:	8e 32       	cpi	r24, 0x2E	; 46
     c32:	b9 f4       	brne	.+46     	; 0xc62 <vfprintf+0xd6>
     c34:	36 fc       	sbrc	r3, 6
     c36:	81 c1       	rjmp	.+770    	; 0xf3a <vfprintf+0x3ae>
     c38:	23 2d       	mov	r18, r3
     c3a:	20 64       	ori	r18, 0x40	; 64
     c3c:	32 2e       	mov	r3, r18
     c3e:	19 c0       	rjmp	.+50     	; 0xc72 <vfprintf+0xe6>
     c40:	36 fe       	sbrs	r3, 6
     c42:	06 c0       	rjmp	.+12     	; 0xc50 <vfprintf+0xc4>
     c44:	8a e0       	ldi	r24, 0x0A	; 10
     c46:	98 9e       	mul	r9, r24
     c48:	20 0d       	add	r18, r0
     c4a:	11 24       	eor	r1, r1
     c4c:	92 2e       	mov	r9, r18
     c4e:	11 c0       	rjmp	.+34     	; 0xc72 <vfprintf+0xe6>
     c50:	ea e0       	ldi	r30, 0x0A	; 10
     c52:	2e 9e       	mul	r2, r30
     c54:	20 0d       	add	r18, r0
     c56:	11 24       	eor	r1, r1
     c58:	22 2e       	mov	r2, r18
     c5a:	f3 2d       	mov	r31, r3
     c5c:	f0 62       	ori	r31, 0x20	; 32
     c5e:	3f 2e       	mov	r3, r31
     c60:	08 c0       	rjmp	.+16     	; 0xc72 <vfprintf+0xe6>
     c62:	8c 36       	cpi	r24, 0x6C	; 108
     c64:	21 f4       	brne	.+8      	; 0xc6e <vfprintf+0xe2>
     c66:	83 2d       	mov	r24, r3
     c68:	80 68       	ori	r24, 0x80	; 128
     c6a:	38 2e       	mov	r3, r24
     c6c:	02 c0       	rjmp	.+4      	; 0xc72 <vfprintf+0xe6>
     c6e:	88 36       	cpi	r24, 0x68	; 104
     c70:	41 f4       	brne	.+16     	; 0xc82 <vfprintf+0xf6>
     c72:	f7 01       	movw	r30, r14
     c74:	93 fd       	sbrc	r25, 3
     c76:	85 91       	lpm	r24, Z+
     c78:	93 ff       	sbrs	r25, 3
     c7a:	81 91       	ld	r24, Z+
     c7c:	7f 01       	movw	r14, r30
     c7e:	81 11       	cpse	r24, r1
     c80:	b3 cf       	rjmp	.-154    	; 0xbe8 <vfprintf+0x5c>
     c82:	98 2f       	mov	r25, r24
     c84:	9f 7d       	andi	r25, 0xDF	; 223
     c86:	95 54       	subi	r25, 0x45	; 69
     c88:	93 30       	cpi	r25, 0x03	; 3
     c8a:	28 f4       	brcc	.+10     	; 0xc96 <vfprintf+0x10a>
     c8c:	0c 5f       	subi	r16, 0xFC	; 252
     c8e:	1f 4f       	sbci	r17, 0xFF	; 255
     c90:	9f e3       	ldi	r25, 0x3F	; 63
     c92:	99 83       	std	Y+1, r25	; 0x01
     c94:	0d c0       	rjmp	.+26     	; 0xcb0 <vfprintf+0x124>
     c96:	83 36       	cpi	r24, 0x63	; 99
     c98:	31 f0       	breq	.+12     	; 0xca6 <vfprintf+0x11a>
     c9a:	83 37       	cpi	r24, 0x73	; 115
     c9c:	71 f0       	breq	.+28     	; 0xcba <vfprintf+0x12e>
     c9e:	83 35       	cpi	r24, 0x53	; 83
     ca0:	09 f0       	breq	.+2      	; 0xca4 <vfprintf+0x118>
     ca2:	59 c0       	rjmp	.+178    	; 0xd56 <vfprintf+0x1ca>
     ca4:	21 c0       	rjmp	.+66     	; 0xce8 <vfprintf+0x15c>
     ca6:	f8 01       	movw	r30, r16
     ca8:	80 81       	ld	r24, Z
     caa:	89 83       	std	Y+1, r24	; 0x01
     cac:	0e 5f       	subi	r16, 0xFE	; 254
     cae:	1f 4f       	sbci	r17, 0xFF	; 255
     cb0:	88 24       	eor	r8, r8
     cb2:	83 94       	inc	r8
     cb4:	91 2c       	mov	r9, r1
     cb6:	53 01       	movw	r10, r6
     cb8:	13 c0       	rjmp	.+38     	; 0xce0 <vfprintf+0x154>
     cba:	28 01       	movw	r4, r16
     cbc:	f2 e0       	ldi	r31, 0x02	; 2
     cbe:	4f 0e       	add	r4, r31
     cc0:	51 1c       	adc	r5, r1
     cc2:	f8 01       	movw	r30, r16
     cc4:	a0 80       	ld	r10, Z
     cc6:	b1 80       	ldd	r11, Z+1	; 0x01
     cc8:	36 fe       	sbrs	r3, 6
     cca:	03 c0       	rjmp	.+6      	; 0xcd2 <vfprintf+0x146>
     ccc:	69 2d       	mov	r22, r9
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	02 c0       	rjmp	.+4      	; 0xcd6 <vfprintf+0x14a>
     cd2:	6f ef       	ldi	r22, 0xFF	; 255
     cd4:	7f ef       	ldi	r23, 0xFF	; 255
     cd6:	c5 01       	movw	r24, r10
     cd8:	0e 94 b2 07 	call	0xf64	; 0xf64 <strnlen>
     cdc:	4c 01       	movw	r8, r24
     cde:	82 01       	movw	r16, r4
     ce0:	f3 2d       	mov	r31, r3
     ce2:	ff 77       	andi	r31, 0x7F	; 127
     ce4:	3f 2e       	mov	r3, r31
     ce6:	16 c0       	rjmp	.+44     	; 0xd14 <vfprintf+0x188>
     ce8:	28 01       	movw	r4, r16
     cea:	22 e0       	ldi	r18, 0x02	; 2
     cec:	42 0e       	add	r4, r18
     cee:	51 1c       	adc	r5, r1
     cf0:	f8 01       	movw	r30, r16
     cf2:	a0 80       	ld	r10, Z
     cf4:	b1 80       	ldd	r11, Z+1	; 0x01
     cf6:	36 fe       	sbrs	r3, 6
     cf8:	03 c0       	rjmp	.+6      	; 0xd00 <vfprintf+0x174>
     cfa:	69 2d       	mov	r22, r9
     cfc:	70 e0       	ldi	r23, 0x00	; 0
     cfe:	02 c0       	rjmp	.+4      	; 0xd04 <vfprintf+0x178>
     d00:	6f ef       	ldi	r22, 0xFF	; 255
     d02:	7f ef       	ldi	r23, 0xFF	; 255
     d04:	c5 01       	movw	r24, r10
     d06:	0e 94 a7 07 	call	0xf4e	; 0xf4e <strnlen_P>
     d0a:	4c 01       	movw	r8, r24
     d0c:	f3 2d       	mov	r31, r3
     d0e:	f0 68       	ori	r31, 0x80	; 128
     d10:	3f 2e       	mov	r3, r31
     d12:	82 01       	movw	r16, r4
     d14:	33 fc       	sbrc	r3, 3
     d16:	1b c0       	rjmp	.+54     	; 0xd4e <vfprintf+0x1c2>
     d18:	82 2d       	mov	r24, r2
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	88 16       	cp	r8, r24
     d1e:	99 06       	cpc	r9, r25
     d20:	b0 f4       	brcc	.+44     	; 0xd4e <vfprintf+0x1c2>
     d22:	b6 01       	movw	r22, r12
     d24:	80 e2       	ldi	r24, 0x20	; 32
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	0e 94 bd 07 	call	0xf7a	; 0xf7a <fputc>
     d2c:	2a 94       	dec	r2
     d2e:	f4 cf       	rjmp	.-24     	; 0xd18 <vfprintf+0x18c>
     d30:	f5 01       	movw	r30, r10
     d32:	37 fc       	sbrc	r3, 7
     d34:	85 91       	lpm	r24, Z+
     d36:	37 fe       	sbrs	r3, 7
     d38:	81 91       	ld	r24, Z+
     d3a:	5f 01       	movw	r10, r30
     d3c:	b6 01       	movw	r22, r12
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	0e 94 bd 07 	call	0xf7a	; 0xf7a <fputc>
     d44:	21 10       	cpse	r2, r1
     d46:	2a 94       	dec	r2
     d48:	21 e0       	ldi	r18, 0x01	; 1
     d4a:	82 1a       	sub	r8, r18
     d4c:	91 08       	sbc	r9, r1
     d4e:	81 14       	cp	r8, r1
     d50:	91 04       	cpc	r9, r1
     d52:	71 f7       	brne	.-36     	; 0xd30 <vfprintf+0x1a4>
     d54:	e8 c0       	rjmp	.+464    	; 0xf26 <vfprintf+0x39a>
     d56:	84 36       	cpi	r24, 0x64	; 100
     d58:	11 f0       	breq	.+4      	; 0xd5e <vfprintf+0x1d2>
     d5a:	89 36       	cpi	r24, 0x69	; 105
     d5c:	41 f5       	brne	.+80     	; 0xdae <vfprintf+0x222>
     d5e:	f8 01       	movw	r30, r16
     d60:	37 fe       	sbrs	r3, 7
     d62:	07 c0       	rjmp	.+14     	; 0xd72 <vfprintf+0x1e6>
     d64:	60 81       	ld	r22, Z
     d66:	71 81       	ldd	r23, Z+1	; 0x01
     d68:	82 81       	ldd	r24, Z+2	; 0x02
     d6a:	93 81       	ldd	r25, Z+3	; 0x03
     d6c:	0c 5f       	subi	r16, 0xFC	; 252
     d6e:	1f 4f       	sbci	r17, 0xFF	; 255
     d70:	08 c0       	rjmp	.+16     	; 0xd82 <vfprintf+0x1f6>
     d72:	60 81       	ld	r22, Z
     d74:	71 81       	ldd	r23, Z+1	; 0x01
     d76:	07 2e       	mov	r0, r23
     d78:	00 0c       	add	r0, r0
     d7a:	88 0b       	sbc	r24, r24
     d7c:	99 0b       	sbc	r25, r25
     d7e:	0e 5f       	subi	r16, 0xFE	; 254
     d80:	1f 4f       	sbci	r17, 0xFF	; 255
     d82:	f3 2d       	mov	r31, r3
     d84:	ff 76       	andi	r31, 0x6F	; 111
     d86:	3f 2e       	mov	r3, r31
     d88:	97 ff       	sbrs	r25, 7
     d8a:	09 c0       	rjmp	.+18     	; 0xd9e <vfprintf+0x212>
     d8c:	90 95       	com	r25
     d8e:	80 95       	com	r24
     d90:	70 95       	com	r23
     d92:	61 95       	neg	r22
     d94:	7f 4f       	sbci	r23, 0xFF	; 255
     d96:	8f 4f       	sbci	r24, 0xFF	; 255
     d98:	9f 4f       	sbci	r25, 0xFF	; 255
     d9a:	f0 68       	ori	r31, 0x80	; 128
     d9c:	3f 2e       	mov	r3, r31
     d9e:	2a e0       	ldi	r18, 0x0A	; 10
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	a3 01       	movw	r20, r6
     da4:	0e 94 f9 07 	call	0xff2	; 0xff2 <__ultoa_invert>
     da8:	88 2e       	mov	r8, r24
     daa:	86 18       	sub	r8, r6
     dac:	45 c0       	rjmp	.+138    	; 0xe38 <vfprintf+0x2ac>
     dae:	85 37       	cpi	r24, 0x75	; 117
     db0:	31 f4       	brne	.+12     	; 0xdbe <vfprintf+0x232>
     db2:	23 2d       	mov	r18, r3
     db4:	2f 7e       	andi	r18, 0xEF	; 239
     db6:	b2 2e       	mov	r11, r18
     db8:	2a e0       	ldi	r18, 0x0A	; 10
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	25 c0       	rjmp	.+74     	; 0xe08 <vfprintf+0x27c>
     dbe:	93 2d       	mov	r25, r3
     dc0:	99 7f       	andi	r25, 0xF9	; 249
     dc2:	b9 2e       	mov	r11, r25
     dc4:	8f 36       	cpi	r24, 0x6F	; 111
     dc6:	c1 f0       	breq	.+48     	; 0xdf8 <vfprintf+0x26c>
     dc8:	18 f4       	brcc	.+6      	; 0xdd0 <vfprintf+0x244>
     dca:	88 35       	cpi	r24, 0x58	; 88
     dcc:	79 f0       	breq	.+30     	; 0xdec <vfprintf+0x260>
     dce:	b5 c0       	rjmp	.+362    	; 0xf3a <vfprintf+0x3ae>
     dd0:	80 37       	cpi	r24, 0x70	; 112
     dd2:	19 f0       	breq	.+6      	; 0xdda <vfprintf+0x24e>
     dd4:	88 37       	cpi	r24, 0x78	; 120
     dd6:	21 f0       	breq	.+8      	; 0xde0 <vfprintf+0x254>
     dd8:	b0 c0       	rjmp	.+352    	; 0xf3a <vfprintf+0x3ae>
     dda:	e9 2f       	mov	r30, r25
     ddc:	e0 61       	ori	r30, 0x10	; 16
     dde:	be 2e       	mov	r11, r30
     de0:	b4 fe       	sbrs	r11, 4
     de2:	0d c0       	rjmp	.+26     	; 0xdfe <vfprintf+0x272>
     de4:	fb 2d       	mov	r31, r11
     de6:	f4 60       	ori	r31, 0x04	; 4
     de8:	bf 2e       	mov	r11, r31
     dea:	09 c0       	rjmp	.+18     	; 0xdfe <vfprintf+0x272>
     dec:	34 fe       	sbrs	r3, 4
     dee:	0a c0       	rjmp	.+20     	; 0xe04 <vfprintf+0x278>
     df0:	29 2f       	mov	r18, r25
     df2:	26 60       	ori	r18, 0x06	; 6
     df4:	b2 2e       	mov	r11, r18
     df6:	06 c0       	rjmp	.+12     	; 0xe04 <vfprintf+0x278>
     df8:	28 e0       	ldi	r18, 0x08	; 8
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	05 c0       	rjmp	.+10     	; 0xe08 <vfprintf+0x27c>
     dfe:	20 e1       	ldi	r18, 0x10	; 16
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <vfprintf+0x27c>
     e04:	20 e1       	ldi	r18, 0x10	; 16
     e06:	32 e0       	ldi	r19, 0x02	; 2
     e08:	f8 01       	movw	r30, r16
     e0a:	b7 fe       	sbrs	r11, 7
     e0c:	07 c0       	rjmp	.+14     	; 0xe1c <vfprintf+0x290>
     e0e:	60 81       	ld	r22, Z
     e10:	71 81       	ldd	r23, Z+1	; 0x01
     e12:	82 81       	ldd	r24, Z+2	; 0x02
     e14:	93 81       	ldd	r25, Z+3	; 0x03
     e16:	0c 5f       	subi	r16, 0xFC	; 252
     e18:	1f 4f       	sbci	r17, 0xFF	; 255
     e1a:	06 c0       	rjmp	.+12     	; 0xe28 <vfprintf+0x29c>
     e1c:	60 81       	ld	r22, Z
     e1e:	71 81       	ldd	r23, Z+1	; 0x01
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	0e 5f       	subi	r16, 0xFE	; 254
     e26:	1f 4f       	sbci	r17, 0xFF	; 255
     e28:	a3 01       	movw	r20, r6
     e2a:	0e 94 f9 07 	call	0xff2	; 0xff2 <__ultoa_invert>
     e2e:	88 2e       	mov	r8, r24
     e30:	86 18       	sub	r8, r6
     e32:	fb 2d       	mov	r31, r11
     e34:	ff 77       	andi	r31, 0x7F	; 127
     e36:	3f 2e       	mov	r3, r31
     e38:	36 fe       	sbrs	r3, 6
     e3a:	0d c0       	rjmp	.+26     	; 0xe56 <vfprintf+0x2ca>
     e3c:	23 2d       	mov	r18, r3
     e3e:	2e 7f       	andi	r18, 0xFE	; 254
     e40:	a2 2e       	mov	r10, r18
     e42:	89 14       	cp	r8, r9
     e44:	58 f4       	brcc	.+22     	; 0xe5c <vfprintf+0x2d0>
     e46:	34 fe       	sbrs	r3, 4
     e48:	0b c0       	rjmp	.+22     	; 0xe60 <vfprintf+0x2d4>
     e4a:	32 fc       	sbrc	r3, 2
     e4c:	09 c0       	rjmp	.+18     	; 0xe60 <vfprintf+0x2d4>
     e4e:	83 2d       	mov	r24, r3
     e50:	8e 7e       	andi	r24, 0xEE	; 238
     e52:	a8 2e       	mov	r10, r24
     e54:	05 c0       	rjmp	.+10     	; 0xe60 <vfprintf+0x2d4>
     e56:	b8 2c       	mov	r11, r8
     e58:	a3 2c       	mov	r10, r3
     e5a:	03 c0       	rjmp	.+6      	; 0xe62 <vfprintf+0x2d6>
     e5c:	b8 2c       	mov	r11, r8
     e5e:	01 c0       	rjmp	.+2      	; 0xe62 <vfprintf+0x2d6>
     e60:	b9 2c       	mov	r11, r9
     e62:	a4 fe       	sbrs	r10, 4
     e64:	0f c0       	rjmp	.+30     	; 0xe84 <vfprintf+0x2f8>
     e66:	fe 01       	movw	r30, r28
     e68:	e8 0d       	add	r30, r8
     e6a:	f1 1d       	adc	r31, r1
     e6c:	80 81       	ld	r24, Z
     e6e:	80 33       	cpi	r24, 0x30	; 48
     e70:	21 f4       	brne	.+8      	; 0xe7a <vfprintf+0x2ee>
     e72:	9a 2d       	mov	r25, r10
     e74:	99 7e       	andi	r25, 0xE9	; 233
     e76:	a9 2e       	mov	r10, r25
     e78:	09 c0       	rjmp	.+18     	; 0xe8c <vfprintf+0x300>
     e7a:	a2 fe       	sbrs	r10, 2
     e7c:	06 c0       	rjmp	.+12     	; 0xe8a <vfprintf+0x2fe>
     e7e:	b3 94       	inc	r11
     e80:	b3 94       	inc	r11
     e82:	04 c0       	rjmp	.+8      	; 0xe8c <vfprintf+0x300>
     e84:	8a 2d       	mov	r24, r10
     e86:	86 78       	andi	r24, 0x86	; 134
     e88:	09 f0       	breq	.+2      	; 0xe8c <vfprintf+0x300>
     e8a:	b3 94       	inc	r11
     e8c:	a3 fc       	sbrc	r10, 3
     e8e:	11 c0       	rjmp	.+34     	; 0xeb2 <vfprintf+0x326>
     e90:	a0 fe       	sbrs	r10, 0
     e92:	06 c0       	rjmp	.+12     	; 0xea0 <vfprintf+0x314>
     e94:	b2 14       	cp	r11, r2
     e96:	88 f4       	brcc	.+34     	; 0xeba <vfprintf+0x32e>
     e98:	28 0c       	add	r2, r8
     e9a:	92 2c       	mov	r9, r2
     e9c:	9b 18       	sub	r9, r11
     e9e:	0e c0       	rjmp	.+28     	; 0xebc <vfprintf+0x330>
     ea0:	b2 14       	cp	r11, r2
     ea2:	60 f4       	brcc	.+24     	; 0xebc <vfprintf+0x330>
     ea4:	b6 01       	movw	r22, r12
     ea6:	80 e2       	ldi	r24, 0x20	; 32
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	0e 94 bd 07 	call	0xf7a	; 0xf7a <fputc>
     eae:	b3 94       	inc	r11
     eb0:	f7 cf       	rjmp	.-18     	; 0xea0 <vfprintf+0x314>
     eb2:	b2 14       	cp	r11, r2
     eb4:	18 f4       	brcc	.+6      	; 0xebc <vfprintf+0x330>
     eb6:	2b 18       	sub	r2, r11
     eb8:	02 c0       	rjmp	.+4      	; 0xebe <vfprintf+0x332>
     eba:	98 2c       	mov	r9, r8
     ebc:	21 2c       	mov	r2, r1
     ebe:	a4 fe       	sbrs	r10, 4
     ec0:	10 c0       	rjmp	.+32     	; 0xee2 <vfprintf+0x356>
     ec2:	b6 01       	movw	r22, r12
     ec4:	80 e3       	ldi	r24, 0x30	; 48
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	0e 94 bd 07 	call	0xf7a	; 0xf7a <fputc>
     ecc:	a2 fe       	sbrs	r10, 2
     ece:	17 c0       	rjmp	.+46     	; 0xefe <vfprintf+0x372>
     ed0:	a1 fc       	sbrc	r10, 1
     ed2:	03 c0       	rjmp	.+6      	; 0xeda <vfprintf+0x34e>
     ed4:	88 e7       	ldi	r24, 0x78	; 120
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	02 c0       	rjmp	.+4      	; 0xede <vfprintf+0x352>
     eda:	88 e5       	ldi	r24, 0x58	; 88
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	b6 01       	movw	r22, r12
     ee0:	0c c0       	rjmp	.+24     	; 0xefa <vfprintf+0x36e>
     ee2:	8a 2d       	mov	r24, r10
     ee4:	86 78       	andi	r24, 0x86	; 134
     ee6:	59 f0       	breq	.+22     	; 0xefe <vfprintf+0x372>
     ee8:	a1 fe       	sbrs	r10, 1
     eea:	02 c0       	rjmp	.+4      	; 0xef0 <vfprintf+0x364>
     eec:	8b e2       	ldi	r24, 0x2B	; 43
     eee:	01 c0       	rjmp	.+2      	; 0xef2 <vfprintf+0x366>
     ef0:	80 e2       	ldi	r24, 0x20	; 32
     ef2:	a7 fc       	sbrc	r10, 7
     ef4:	8d e2       	ldi	r24, 0x2D	; 45
     ef6:	b6 01       	movw	r22, r12
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	0e 94 bd 07 	call	0xf7a	; 0xf7a <fputc>
     efe:	89 14       	cp	r8, r9
     f00:	38 f4       	brcc	.+14     	; 0xf10 <vfprintf+0x384>
     f02:	b6 01       	movw	r22, r12
     f04:	80 e3       	ldi	r24, 0x30	; 48
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	0e 94 bd 07 	call	0xf7a	; 0xf7a <fputc>
     f0c:	9a 94       	dec	r9
     f0e:	f7 cf       	rjmp	.-18     	; 0xefe <vfprintf+0x372>
     f10:	8a 94       	dec	r8
     f12:	f3 01       	movw	r30, r6
     f14:	e8 0d       	add	r30, r8
     f16:	f1 1d       	adc	r31, r1
     f18:	80 81       	ld	r24, Z
     f1a:	b6 01       	movw	r22, r12
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	0e 94 bd 07 	call	0xf7a	; 0xf7a <fputc>
     f22:	81 10       	cpse	r8, r1
     f24:	f5 cf       	rjmp	.-22     	; 0xf10 <vfprintf+0x384>
     f26:	22 20       	and	r2, r2
     f28:	09 f4       	brne	.+2      	; 0xf2c <vfprintf+0x3a0>
     f2a:	42 ce       	rjmp	.-892    	; 0xbb0 <vfprintf+0x24>
     f2c:	b6 01       	movw	r22, r12
     f2e:	80 e2       	ldi	r24, 0x20	; 32
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	0e 94 bd 07 	call	0xf7a	; 0xf7a <fputc>
     f36:	2a 94       	dec	r2
     f38:	f6 cf       	rjmp	.-20     	; 0xf26 <vfprintf+0x39a>
     f3a:	f6 01       	movw	r30, r12
     f3c:	86 81       	ldd	r24, Z+6	; 0x06
     f3e:	97 81       	ldd	r25, Z+7	; 0x07
     f40:	02 c0       	rjmp	.+4      	; 0xf46 <vfprintf+0x3ba>
     f42:	8f ef       	ldi	r24, 0xFF	; 255
     f44:	9f ef       	ldi	r25, 0xFF	; 255
     f46:	2b 96       	adiw	r28, 0x0b	; 11
     f48:	e2 e1       	ldi	r30, 0x12	; 18
     f4a:	0c 94 73 08 	jmp	0x10e6	; 0x10e6 <__epilogue_restores__>

00000f4e <strnlen_P>:
     f4e:	fc 01       	movw	r30, r24
     f50:	05 90       	lpm	r0, Z+
     f52:	61 50       	subi	r22, 0x01	; 1
     f54:	70 40       	sbci	r23, 0x00	; 0
     f56:	01 10       	cpse	r0, r1
     f58:	d8 f7       	brcc	.-10     	; 0xf50 <strnlen_P+0x2>
     f5a:	80 95       	com	r24
     f5c:	90 95       	com	r25
     f5e:	8e 0f       	add	r24, r30
     f60:	9f 1f       	adc	r25, r31
     f62:	08 95       	ret

00000f64 <strnlen>:
     f64:	fc 01       	movw	r30, r24
     f66:	61 50       	subi	r22, 0x01	; 1
     f68:	70 40       	sbci	r23, 0x00	; 0
     f6a:	01 90       	ld	r0, Z+
     f6c:	01 10       	cpse	r0, r1
     f6e:	d8 f7       	brcc	.-10     	; 0xf66 <strnlen+0x2>
     f70:	80 95       	com	r24
     f72:	90 95       	com	r25
     f74:	8e 0f       	add	r24, r30
     f76:	9f 1f       	adc	r25, r31
     f78:	08 95       	ret

00000f7a <fputc>:
     f7a:	0f 93       	push	r16
     f7c:	1f 93       	push	r17
     f7e:	cf 93       	push	r28
     f80:	df 93       	push	r29
     f82:	fb 01       	movw	r30, r22
     f84:	23 81       	ldd	r18, Z+3	; 0x03
     f86:	21 fd       	sbrc	r18, 1
     f88:	03 c0       	rjmp	.+6      	; 0xf90 <fputc+0x16>
     f8a:	8f ef       	ldi	r24, 0xFF	; 255
     f8c:	9f ef       	ldi	r25, 0xFF	; 255
     f8e:	2c c0       	rjmp	.+88     	; 0xfe8 <fputc+0x6e>
     f90:	22 ff       	sbrs	r18, 2
     f92:	16 c0       	rjmp	.+44     	; 0xfc0 <fputc+0x46>
     f94:	46 81       	ldd	r20, Z+6	; 0x06
     f96:	57 81       	ldd	r21, Z+7	; 0x07
     f98:	24 81       	ldd	r18, Z+4	; 0x04
     f9a:	35 81       	ldd	r19, Z+5	; 0x05
     f9c:	42 17       	cp	r20, r18
     f9e:	53 07       	cpc	r21, r19
     fa0:	44 f4       	brge	.+16     	; 0xfb2 <fputc+0x38>
     fa2:	a0 81       	ld	r26, Z
     fa4:	b1 81       	ldd	r27, Z+1	; 0x01
     fa6:	9d 01       	movw	r18, r26
     fa8:	2f 5f       	subi	r18, 0xFF	; 255
     faa:	3f 4f       	sbci	r19, 0xFF	; 255
     fac:	31 83       	std	Z+1, r19	; 0x01
     fae:	20 83       	st	Z, r18
     fb0:	8c 93       	st	X, r24
     fb2:	26 81       	ldd	r18, Z+6	; 0x06
     fb4:	37 81       	ldd	r19, Z+7	; 0x07
     fb6:	2f 5f       	subi	r18, 0xFF	; 255
     fb8:	3f 4f       	sbci	r19, 0xFF	; 255
     fba:	37 83       	std	Z+7, r19	; 0x07
     fbc:	26 83       	std	Z+6, r18	; 0x06
     fbe:	14 c0       	rjmp	.+40     	; 0xfe8 <fputc+0x6e>
     fc0:	8b 01       	movw	r16, r22
     fc2:	ec 01       	movw	r28, r24
     fc4:	fb 01       	movw	r30, r22
     fc6:	00 84       	ldd	r0, Z+8	; 0x08
     fc8:	f1 85       	ldd	r31, Z+9	; 0x09
     fca:	e0 2d       	mov	r30, r0
     fcc:	09 95       	icall
     fce:	89 2b       	or	r24, r25
     fd0:	e1 f6       	brne	.-72     	; 0xf8a <fputc+0x10>
     fd2:	d8 01       	movw	r26, r16
     fd4:	16 96       	adiw	r26, 0x06	; 6
     fd6:	8d 91       	ld	r24, X+
     fd8:	9c 91       	ld	r25, X
     fda:	17 97       	sbiw	r26, 0x07	; 7
     fdc:	01 96       	adiw	r24, 0x01	; 1
     fde:	17 96       	adiw	r26, 0x07	; 7
     fe0:	9c 93       	st	X, r25
     fe2:	8e 93       	st	-X, r24
     fe4:	16 97       	sbiw	r26, 0x06	; 6
     fe6:	ce 01       	movw	r24, r28
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	1f 91       	pop	r17
     fee:	0f 91       	pop	r16
     ff0:	08 95       	ret

00000ff2 <__ultoa_invert>:
     ff2:	fa 01       	movw	r30, r20
     ff4:	aa 27       	eor	r26, r26
     ff6:	28 30       	cpi	r18, 0x08	; 8
     ff8:	51 f1       	breq	.+84     	; 0x104e <__ultoa_invert+0x5c>
     ffa:	20 31       	cpi	r18, 0x10	; 16
     ffc:	81 f1       	breq	.+96     	; 0x105e <__ultoa_invert+0x6c>
     ffe:	e8 94       	clt
    1000:	6f 93       	push	r22
    1002:	6e 7f       	andi	r22, 0xFE	; 254
    1004:	6e 5f       	subi	r22, 0xFE	; 254
    1006:	7f 4f       	sbci	r23, 0xFF	; 255
    1008:	8f 4f       	sbci	r24, 0xFF	; 255
    100a:	9f 4f       	sbci	r25, 0xFF	; 255
    100c:	af 4f       	sbci	r26, 0xFF	; 255
    100e:	b1 e0       	ldi	r27, 0x01	; 1
    1010:	3e d0       	rcall	.+124    	; 0x108e <__ultoa_invert+0x9c>
    1012:	b4 e0       	ldi	r27, 0x04	; 4
    1014:	3c d0       	rcall	.+120    	; 0x108e <__ultoa_invert+0x9c>
    1016:	67 0f       	add	r22, r23
    1018:	78 1f       	adc	r23, r24
    101a:	89 1f       	adc	r24, r25
    101c:	9a 1f       	adc	r25, r26
    101e:	a1 1d       	adc	r26, r1
    1020:	68 0f       	add	r22, r24
    1022:	79 1f       	adc	r23, r25
    1024:	8a 1f       	adc	r24, r26
    1026:	91 1d       	adc	r25, r1
    1028:	a1 1d       	adc	r26, r1
    102a:	6a 0f       	add	r22, r26
    102c:	71 1d       	adc	r23, r1
    102e:	81 1d       	adc	r24, r1
    1030:	91 1d       	adc	r25, r1
    1032:	a1 1d       	adc	r26, r1
    1034:	20 d0       	rcall	.+64     	; 0x1076 <__ultoa_invert+0x84>
    1036:	09 f4       	brne	.+2      	; 0x103a <__ultoa_invert+0x48>
    1038:	68 94       	set
    103a:	3f 91       	pop	r19
    103c:	2a e0       	ldi	r18, 0x0A	; 10
    103e:	26 9f       	mul	r18, r22
    1040:	11 24       	eor	r1, r1
    1042:	30 19       	sub	r19, r0
    1044:	30 5d       	subi	r19, 0xD0	; 208
    1046:	31 93       	st	Z+, r19
    1048:	de f6       	brtc	.-74     	; 0x1000 <__ultoa_invert+0xe>
    104a:	cf 01       	movw	r24, r30
    104c:	08 95       	ret
    104e:	46 2f       	mov	r20, r22
    1050:	47 70       	andi	r20, 0x07	; 7
    1052:	40 5d       	subi	r20, 0xD0	; 208
    1054:	41 93       	st	Z+, r20
    1056:	b3 e0       	ldi	r27, 0x03	; 3
    1058:	0f d0       	rcall	.+30     	; 0x1078 <__ultoa_invert+0x86>
    105a:	c9 f7       	brne	.-14     	; 0x104e <__ultoa_invert+0x5c>
    105c:	f6 cf       	rjmp	.-20     	; 0x104a <__ultoa_invert+0x58>
    105e:	46 2f       	mov	r20, r22
    1060:	4f 70       	andi	r20, 0x0F	; 15
    1062:	40 5d       	subi	r20, 0xD0	; 208
    1064:	4a 33       	cpi	r20, 0x3A	; 58
    1066:	18 f0       	brcs	.+6      	; 0x106e <__ultoa_invert+0x7c>
    1068:	49 5d       	subi	r20, 0xD9	; 217
    106a:	31 fd       	sbrc	r19, 1
    106c:	40 52       	subi	r20, 0x20	; 32
    106e:	41 93       	st	Z+, r20
    1070:	02 d0       	rcall	.+4      	; 0x1076 <__ultoa_invert+0x84>
    1072:	a9 f7       	brne	.-22     	; 0x105e <__ultoa_invert+0x6c>
    1074:	ea cf       	rjmp	.-44     	; 0x104a <__ultoa_invert+0x58>
    1076:	b4 e0       	ldi	r27, 0x04	; 4
    1078:	a6 95       	lsr	r26
    107a:	97 95       	ror	r25
    107c:	87 95       	ror	r24
    107e:	77 95       	ror	r23
    1080:	67 95       	ror	r22
    1082:	ba 95       	dec	r27
    1084:	c9 f7       	brne	.-14     	; 0x1078 <__ultoa_invert+0x86>
    1086:	00 97       	sbiw	r24, 0x00	; 0
    1088:	61 05       	cpc	r22, r1
    108a:	71 05       	cpc	r23, r1
    108c:	08 95       	ret
    108e:	9b 01       	movw	r18, r22
    1090:	ac 01       	movw	r20, r24
    1092:	0a 2e       	mov	r0, r26
    1094:	06 94       	lsr	r0
    1096:	57 95       	ror	r21
    1098:	47 95       	ror	r20
    109a:	37 95       	ror	r19
    109c:	27 95       	ror	r18
    109e:	ba 95       	dec	r27
    10a0:	c9 f7       	brne	.-14     	; 0x1094 <__ultoa_invert+0xa2>
    10a2:	62 0f       	add	r22, r18
    10a4:	73 1f       	adc	r23, r19
    10a6:	84 1f       	adc	r24, r20
    10a8:	95 1f       	adc	r25, r21
    10aa:	a0 1d       	adc	r26, r0
    10ac:	08 95       	ret

000010ae <__prologue_saves__>:
    10ae:	2f 92       	push	r2
    10b0:	3f 92       	push	r3
    10b2:	4f 92       	push	r4
    10b4:	5f 92       	push	r5
    10b6:	6f 92       	push	r6
    10b8:	7f 92       	push	r7
    10ba:	8f 92       	push	r8
    10bc:	9f 92       	push	r9
    10be:	af 92       	push	r10
    10c0:	bf 92       	push	r11
    10c2:	cf 92       	push	r12
    10c4:	df 92       	push	r13
    10c6:	ef 92       	push	r14
    10c8:	ff 92       	push	r15
    10ca:	0f 93       	push	r16
    10cc:	1f 93       	push	r17
    10ce:	cf 93       	push	r28
    10d0:	df 93       	push	r29
    10d2:	cd b7       	in	r28, 0x3d	; 61
    10d4:	de b7       	in	r29, 0x3e	; 62
    10d6:	ca 1b       	sub	r28, r26
    10d8:	db 0b       	sbc	r29, r27
    10da:	0f b6       	in	r0, 0x3f	; 63
    10dc:	f8 94       	cli
    10de:	de bf       	out	0x3e, r29	; 62
    10e0:	0f be       	out	0x3f, r0	; 63
    10e2:	cd bf       	out	0x3d, r28	; 61
    10e4:	09 94       	ijmp

000010e6 <__epilogue_restores__>:
    10e6:	2a 88       	ldd	r2, Y+18	; 0x12
    10e8:	39 88       	ldd	r3, Y+17	; 0x11
    10ea:	48 88       	ldd	r4, Y+16	; 0x10
    10ec:	5f 84       	ldd	r5, Y+15	; 0x0f
    10ee:	6e 84       	ldd	r6, Y+14	; 0x0e
    10f0:	7d 84       	ldd	r7, Y+13	; 0x0d
    10f2:	8c 84       	ldd	r8, Y+12	; 0x0c
    10f4:	9b 84       	ldd	r9, Y+11	; 0x0b
    10f6:	aa 84       	ldd	r10, Y+10	; 0x0a
    10f8:	b9 84       	ldd	r11, Y+9	; 0x09
    10fa:	c8 84       	ldd	r12, Y+8	; 0x08
    10fc:	df 80       	ldd	r13, Y+7	; 0x07
    10fe:	ee 80       	ldd	r14, Y+6	; 0x06
    1100:	fd 80       	ldd	r15, Y+5	; 0x05
    1102:	0c 81       	ldd	r16, Y+4	; 0x04
    1104:	1b 81       	ldd	r17, Y+3	; 0x03
    1106:	aa 81       	ldd	r26, Y+2	; 0x02
    1108:	b9 81       	ldd	r27, Y+1	; 0x01
    110a:	ce 0f       	add	r28, r30
    110c:	d1 1d       	adc	r29, r1
    110e:	0f b6       	in	r0, 0x3f	; 63
    1110:	f8 94       	cli
    1112:	de bf       	out	0x3e, r29	; 62
    1114:	0f be       	out	0x3f, r0	; 63
    1116:	cd bf       	out	0x3d, r28	; 61
    1118:	ed 01       	movw	r28, r26
    111a:	08 95       	ret

0000111c <_exit>:
    111c:	f8 94       	cli

0000111e <__stop_program>:
    111e:	ff cf       	rjmp	.-2      	; 0x111e <__stop_program>
